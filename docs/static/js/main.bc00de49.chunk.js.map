{"version":3,"sources":["components/LayoutOverlay/LayoutOverlay.tsx","utils/treemap.ts","components/LayoutContent/LayoutContent.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LayoutOverlay","state","hovered","hidden","selected","transitionDuration","event","this","setState","stopPropagation","width","height","margin","padding","position","display","props","node","data","src","backgroundSize","backgroundPosition","backgroundImage","getSplashImage","backgroundRepeat","opacity","transition","getTransitionDuration","bottom","right","borderLeft","left","borderTop","transitionDelay","fontWeight","fontSize","lineHeight","textTransform","borderBottom","backgroundColor","top","parentState","className","onClick","bind","onMouseEnter","onMouseLeave","style","getStyle","getSplashStyle","getColorStyle","getLSliderStyle","getTSliderStyle","getLabelStyle","label","React","treemap","d3","tile","x0","y0","x1","y1","children","child","sum","d","undefined","weight","content","value","sort","a","b","LayoutContent","map","txt","index","getChildStyle","key","border","getImage","overflowY","overflowX","getLabel","getChildren","Layout","container","layout","type","selectedChild","update","nodeData","Object","assign","filter","i","push","parent","window","innerWidth","innerHeight","zIndex","getChildTop","getChildLeft","getChildHeight","getChildWidth","getChildDisplay","isChildSelected","areNoChildrenSelected","indexOf","getChildIndex","setChildSelected","onChildClick","nodeState","getChildState","ref","el","App","addEventListener","func","timer","clearTimeout","setTimeout","debounce","forceUpdate","background","Component","Boolean","location","hostname","match","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc00de49.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    state = {\r\n        hovered: false,\r\n        hidden: false,\r\n        selected: false,\r\n        transitionDuration: 300\r\n    }\r\n\r\n    onMouseEnter(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: true });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onMouseLeave(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: false });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onClick() {\r\n        this.setState({ hidden: true });\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        const padding = 0;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2*padding) + 'px)',\r\n            height: 'calc(100% - ' + (2*padding) + 'px)',\r\n            margin : padding + 'px' ,\r\n            position: 'absolute',\r\n            display: this.state.hidden ? 'none' : ''\r\n        }\r\n    }\r\n\r\n    getSplashImage() : string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getSplashStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: 'url(\"' + this.getSplashImage() + '\")',\r\n            backgroundRepeat: 'no-repeat',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getColorStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            opacity: !this.state.hovered ? 0 : 0.8,\r\n            // background: 'black',\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getLSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            right: 0,\r\n            // textAlign: 'right',\r\n            borderLeft: '0.1px solid grey',\r\n            height: '100%',\r\n            width: this.state.hovered ? '80%' : '100%',\r\n            transition: this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getTSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n            // textAlign: 'right',\r\n            borderTop: '0.1px solid grey',\r\n            height: this.state.hovered ? '70%' : '100%',\r\n            width: '100%',\r\n            // background: this.state.hovered ? 'white' : 'transparent',\r\n            // opacity: this.state.hovered ? 0.8 : 1,\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay : this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: 'bolder',\r\n            fontSize: '20px',\r\n            lineHeight: '20px',\r\n            textTransform: 'uppercase',\r\n            borderBottom: '0.1px solid grey',\r\n            borderTop: '0.1px solid grey',\r\n            backgroundColor: 'lightgrey',\r\n            // mixBlendMode: 'multiply',\r\n            left: 0,\r\n            top: 0,\r\n            opacity: this.props.parentState == null || this.props.parentState.selected ? 1 : 0,\r\n            transition: this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout-overlay'\r\n                onClick={this.onClick.bind(this)}\r\n                onMouseEnter={this.onMouseEnter.bind(this)}\r\n                onMouseLeave={this.onMouseLeave.bind(this)}\r\n                style={this.getStyle()}\r\n            >\r\n                <div className='layout-splash' style={this.getSplashStyle()}></div>\r\n                <div className='layout-color' style={this.getColorStyle()}></div>\r\n                <div className='layout-lslider' style={this.getLSliderStyle()}>\r\n                    <div className='layout-tslider' style={this.getTSliderStyle()}>\r\n                        <div\r\n                            className='layout-label'\r\n                            style={this.getLabelStyle()}>{this.props.node.data.label}</div>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        d3.treemapBinary(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (data: NodeData) => {\r\n        return data.weight !== undefined ? data.weight : data.content ? 1 : 2; // 1;\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (a.value || 0) - (b.value || 0))) as Node;\r\n}","import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutContent extends React.Component<LayoutProps> {\r\n    \r\n\r\n    getImage() {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getChildStyle() : React.CSSProperties {\r\n        return {\r\n\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        return this.props.node.data.content ? this.props.node.data.content.map((txt, index) => {\r\n            return (\r\n                <div \r\n                    className='layout-text'\r\n                    style={this.getChildStyle()}\r\n                    key={index}\r\n                    >\r\n                    {txt}\r\n                </div>\r\n            )\r\n        }) : [];\r\n    }\r\n\r\n    getLabelStyle() : React.CSSProperties {\r\n        return {\r\n            textTransform: 'uppercase',\r\n            fontWeight : 'bold'\r\n            // borderBottom : '1px solid white',\r\n            // color : 'white',\r\n            // backgroundColor : 'darkgrey'\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        return this.props.node.data.content ? (\r\n            <div\r\n                className='layout-label'\r\n                style={this.getLabelStyle()}\r\n            >{this.props.node.data.label}\r\n            </div>\r\n        ) : undefined;\r\n    }\r\n\r\n    getStyle() : React.CSSProperties {\r\n\r\n        const padding = 0;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2*padding) + 'px)',\r\n            height: 'calc(100% - ' + (2*padding) + 'px)',\r\n            margin : padding + 'px' ,\r\n            position: 'absolute',\r\n            border : '0.1px solid grey',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: 'url(\"' + this.getImage() + '\")',\r\n            // filter: 'grayscale(50%)',\r\n            backgroundRepeat: 'no-repeat',\r\n            overflowY : 'auto',\r\n            overflowX : 'hidden',\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div   \r\n                className='layout-content'\r\n                style={this.getStyle()}\r\n            >   \r\n                {this.getLabel()}\r\n                {this.getChildren()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from './../../model/Node';\r\nimport { treemap } from './../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\n\r\nexport interface LayoutProps {\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap({ label: '_', type: 'dir' }, 100, 100);\r\n\r\n    state = {\r\n        selectedChild: null,\r\n        transitionDuration: 500\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n\r\n        const nodeData = Object.assign({}, this.props.node.data);\r\n        nodeData.children = !nodeData.children ? undefined : nodeData.children.filter(child => this.props.parentState?.selected || !child.content)\r\n        \r\n        for(let i = 0; i<1; i++) {\r\n            nodeData.children?.push({\r\n                label : \"_\",\r\n                type : 'data',\r\n            })\r\n        }\r\n\r\n        if (this.props.parentState?.selected) {\r\n\r\n            if (this.props.parent) {\r\n                nodeData.children?.push({\r\n                    label : this.props.parent.data.label,\r\n                    type : 'data',\r\n                    content: [\"<<<\"],\r\n                    weight: 0.5\r\n                })\r\n                nodeData.children?.push({\r\n                    label : \"_\",\r\n                    type : 'data',\r\n                    weight: 0.5\r\n                })\r\n            }\r\n        }\r\n\r\n        this.layout = treemap(nodeData, window.innerWidth, window.innerHeight);\r\n        // this.layout = treemap(this.props.node.data, window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            zIndex: 1,\r\n        }\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            display: this.getChildDisplay(child),\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            zIndex: -1\r\n        }\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.x1 - child.x0)) + \"%\";\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.y1 - child.y0)) + \"%\";\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return 'visible';\r\n        return 'none';\r\n    }\r\n\r\n    getChildIndex(child: Node) { // NOTE - this can probably be a property of the child ---\r\n        return this.layout.children?.indexOf(child);\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildSelected(child)\r\n        }\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.getChildIndex(child) === this.state.selectedChild;\r\n    }\r\n\r\n    setChildSelected(child: Node) {\r\n        this.setState({ selectedChild: this.getChildIndex(child) })\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChild === null;\r\n    }\r\n\r\n    onChildClick(child: Node) {\r\n        this.setChildSelected(child);\r\n    }\r\n\r\n    render() {\r\n        const children = this.layout.children ? this.layout.children.map((child, index) => {\r\n            return (\r\n                <div\r\n                    key={index}\r\n                    className='layout-child'\r\n                    onClick={() => { this.onChildClick(child); }}\r\n                    style={this.getChildStyle(child)}\r\n                >\r\n                    <Layout\r\n                        node={child}\r\n                        nodeState={this.getChildState(child)}\r\n                        parent={this.props.node}\r\n                        parentState={this.props.nodeState}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n            : [];\r\n\r\n        return (\r\n            <div\r\n                className='layout'\r\n                ref={el => this.container = el}\r\n                style={this.getStyle()}\r\n            >\r\n                {\r\n                    this.props.node.data.type === 'dir' ?\r\n                        <LayoutOverlay\r\n                            node={this.props.node}\r\n                            nodeState={this.props.nodeState}\r\n                            parent={this.props.parent}\r\n                            parentState={this.props.parentState}\r\n                        />\r\n                        :\r\n                        <LayoutContent\r\n                            node={this.props.node}\r\n                            nodeState={this.props.nodeState}\r\n                            parent={this.props.parent}\r\n                            parentState={this.props.parentState}\r\n                        />\r\n\r\n                }\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout/Layout';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 1000, event);\n    };\n}\n\nexport interface AppProps {\n    data : NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", debounce(() => {\n            this.forceUpdate();\n        }));\n    }\n\n    render() {\n\n        const node = treemap(this.props.data, window.innerWidth, window.innerHeight);\n        const nodeState = { selected: true }\n\n        return (\n            <div\n                className=\"App\"\n                style={{\n                    height: '100%',\n                    width: '100%',\n                    background: 'lightgrey',\n                    position: 'absolute'\n                }}\n            >\n                <Layout\n                    node={node}\n                    nodeState={nodeState}\n                    parent={null}\n                    parentState={null}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data/data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(<App data={data as NodeData}/>, document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}