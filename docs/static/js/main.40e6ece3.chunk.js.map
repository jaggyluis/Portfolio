{"version":3,"sources":["components/LayoutOverlay/LayoutOverlay.tsx","utils/treemap.ts","components/LayoutContent/LayoutContent.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LayoutOverlay","state","hovered","hidden","selected","transitionDuration","event","this","setState","stopPropagation","Math","floor","random","width","height","margin","padding","position","display","transition","getTransitionDuration","props","node","data","src","backgroundSize","backgroundPosition","backgroundImage","getSplashImage","backgroundRepeat","opacity","filter","background","bottom","right","left","transitionDelay","fontWeight","fontSize","lineHeight","textTransform","marginLeft","mixBlendMode","top","parentState","className","onClick","bind","onMouseEnter","onMouseLeave","style","getStyle","getSplashStyle","getColorStyle","getLSliderStyle","getSliderColorStyle","getTSliderStyle","getLabelStyle","label","React","treemap","d3","tile","x0","y0","x1","y1","children","child","sum","d","undefined","weight","content","value","sort","a","b","LayoutContent","borderBottom","paddingBottom","textAlign","paddingRight","map","txt","index","getChildStyle","key","v","nodeState","getImage","overflowY","overflowX","getLabel","getChildren","Layout","container","layout","type","id","window","innerWidth","innerHeight","selectedChildId","update","addEventListener","func","timer","clearTimeout","setTimeout","debounce","nodeData","Object","assign","push","zIndex","getChildTop","getChildLeft","getChildHeight","getChildWidth","getChildDisplay","isChildSelected","areNoChildrenSelected","setChildSelected","onChildClick","parent","getChildState","ref","el","App","onNodeClick","Component","Boolean","location","hostname","match","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40e6ece3.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    state = {\r\n        hovered: false,\r\n        hidden: false,\r\n        selected: false,\r\n        transitionDuration: 300\r\n    }\r\n\r\n    onMouseEnter(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: true });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onMouseLeave(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: false });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onClick() {\r\n        this.setState({ hidden: true });\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        const padding = 0;\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2 * padding) + 'px)',\r\n            height: 'calc(100% - ' + (2 * padding) + 'px)',\r\n            // background: 'rgba(' + v + ',' + v + ',' + v + ',' + 1 + ')',\r\n            margin: padding + 'px',\r\n            position: 'absolute',\r\n            // filter: 'saturate(0.5)',\r\n            // opacity: this.state.hovered ? 0 : 1,\r\n            display: this.state.hidden ? 'none' : '',\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getSplashImage(): string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getSplashStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: 'url(\"' + this.getSplashImage() + '\")',\r\n            backgroundRepeat: 'no-repeat',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            filter: 'grayscale(50%)',\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getColorStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            background: 'rgba(255,255,255,0.2)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getLSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            right: 0,\r\n            height: '100%',\r\n            width: !this.state.hovered ? '80%' : '100%',\r\n            transition: this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getTSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n            height: !this.state.hovered ? '70%' : '100%',\r\n            width: '100%',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getSliderColorStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            background: 'rgba(255,255,255,0.5)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: 'bolder',\r\n            fontSize: '40px',\r\n            lineHeight: '32px',\r\n            textTransform: 'uppercase',\r\n            marginLeft: '-2px',\r\n            // color: 'white',\r\n            // background: 'rgba(255,255,255,0.5)',\r\n            mixBlendMode: 'overlay',\r\n            left: 0,\r\n            top: 0,\r\n            opacity: this.props.parentState == null || this.props.parentState.selected ? 1 : 0,\r\n            transition: this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout-overlay'\r\n                onClick={this.onClick.bind(this)}\r\n                onMouseEnter={this.onMouseEnter.bind(this)}\r\n                onMouseLeave={this.onMouseLeave.bind(this)}\r\n                style={this.getStyle()}\r\n            >\r\n                <div className='layout-splash' style={this.getSplashStyle()}></div>\r\n                <div className='layout-color' style={this.getColorStyle()}></div>\r\n                <div className='layout-lslider' style={this.getLSliderStyle()}>\r\n                    <div style={this.getSliderColorStyle()}></div>\r\n                    <div className='layout-tslider' style={this.getTSliderStyle()}>\r\n                        <div style={this.getSliderColorStyle()}></div>\r\n                        <div\r\n                            className='layout-label'\r\n                            style={this.getLabelStyle()}>{this.props.node.data.label}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        // d3.treemapBinary(node, 0, 0, width, height);\r\n        // d3.treemapResquarify(node, 0, 0, width, height);\r\n        d3.treemapSquarify(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (data: NodeData) => {\r\n        return data.weight !== undefined ? data.weight : data.content ? 2 : 1; // 1;\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (a.value || 0) - (b.value || 0))) as Node;\r\n}","import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutContent extends React.Component<LayoutProps> {\r\n    \r\n    getImage() {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getChildStyle() : React.CSSProperties {\r\n        return {\r\n            margin: \"32px 30% 0 0\",\r\n            borderBottom : '2px solid black',\r\n            paddingBottom : '10px',\r\n            textAlign: 'right',\r\n            paddingRight: '10px'\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        return this.props.node.data.content ? this.props.node.data.content.map((txt, index) => {\r\n            return (\r\n                <div \r\n                    className='layout-text'\r\n                    style={this.getChildStyle()}\r\n                    key={index}\r\n                    >\r\n                    {txt}\r\n                </div>\r\n            )\r\n        }) : [];\r\n    }\r\n\r\n    getLabelStyle() : React.CSSProperties {\r\n        return {\r\n            textTransform: 'uppercase',\r\n            fontWeight : 'bold',\r\n            fontSize : '40px',\r\n            marginLeft: '-2px',\r\n            lineHeight: '31px',\r\n            position: 'fixed',\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        return this.props.node.data.content ? (\r\n            <div\r\n                className='layout-label'\r\n                style={this.getLabelStyle()}\r\n            >{this.props.node.data.label}\r\n            </div>\r\n        ) : undefined;\r\n    }\r\n\r\n    getStyle() : React.CSSProperties {\r\n\r\n        const padding = 0;\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2*padding) + 'px)',\r\n            height: 'calc(100% - ' + (2*padding) + 'px)',\r\n            background: this.props.node.data.src ? '' : 'rgba(' + v + ',' + v + ',' + v + ',' + 0.3 + ')',\r\n            margin : padding + 'px' ,\r\n            position: 'absolute',\r\n            backgroundSize:  this.props.nodeState.selected ? 'contain' :'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: 'url(\"' + this.getImage() + '\")',\r\n            // filter: this.props.parentState?.selected ? '' : 'contrast(0.3)',\r\n            // opacity: this.props.parentState?.selected ? 1 : 0.8,\r\n            backgroundRepeat: 'no-repeat',\r\n            overflowY : 'auto',\r\n            overflowX : 'hidden'\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div   \r\n                className='layout-content'\r\n                style={this.getStyle()}\r\n            >   \r\n                {this.getLabel()}\r\n                {this.getChildren()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from './../../model/Node';\r\nimport { treemap } from './../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\n\r\nfunction debounce(func: any) {\r\n    var timer: any;\r\n    return function (event: any) {\r\n        if (timer) clearTimeout(timer);\r\n        timer = setTimeout(func, 500, event);\r\n    };\r\n}\r\n\r\n/**\r\n * Shuffles array in place.\r\n * @param {Array} a items An array containing the items.\r\n */\r\nfunction shuffle(a: any) {\r\n    var j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n}\r\n\r\nexport interface LayoutProps {\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onChildClick?: (child: Node) => void;\r\n}\r\nexport interface LayoutState {\r\n    selectedChildId: string | null;\r\n    transitionDuration: number;\r\n    width : number;\r\n    height : number;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap({ label: '_', type: 'dir', id: '_' }, 100, 100);\r\n\r\n    state: LayoutState = {\r\n        width : window.innerWidth,\r\n        height: window.innerHeight,\r\n        selectedChildId: null,\r\n        transitionDuration: 500\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        this.update();\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", debounce(() => {\r\n            if (this.props.nodeState.selected) {\r\n                this.setState({width : window.innerWidth, height : window.innerHeight})\r\n            }\r\n        }));\r\n    }\r\n\r\n    update() {\r\n\r\n        if (this.props.nodeState.hidden) {\r\n            this.layout = treemap({ label: '_', type: 'dir', id: '_' }, 100, 100);\r\n            this.state.selectedChildId = null;\r\n        } else {\r\n            const nodeData = Object.assign({}, this.props.node.data);\r\n            nodeData.children = !nodeData.children ? undefined : nodeData.children.filter(child => this.props.parentState?.selected || !child.content)\r\n    \r\n            // for (let i = 0; i < 1; i++) {\r\n            //     nodeData.children?.push({\r\n            //         label: \"_\",\r\n            //         type: 'data',\r\n            //     })\r\n            // }\r\n    \r\n            // shuffle(nodeData.children || []);\r\n     \r\n            if (this.props.parentState && this.props.parentState.selected && nodeData.children) {\r\n    \r\n                nodeData.children.push({\r\n                    label: this.props.node.data.label,\r\n                    id: '__label__',\r\n                    type: 'data',\r\n                    content: [], //this.props.parent ? [\"<<< \" + this.props.parent.data.label] : [],\r\n                    weight: 0.5\r\n                })\r\n    \r\n                nodeData.children?.push({\r\n                    label: '_',\r\n                    id: '__filler__',\r\n                    type: 'data',\r\n                    weight: 0.5\r\n                })\r\n            }\r\n    \r\n            this.layout = treemap(nodeData, this.state.width, this.state.height);\r\n            this.state.selectedChildId = null;\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n        // const v = Math.floor(Math.random() * 20);\r\n\r\n        return {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            // background: 'rgba(' + v + ',' + v + ',' + v + ',' + 0.5 + ')',\r\n            // border : '0.5px solid rgba(0,0,0,0.05)',\r\n            zIndex: 1,\r\n            display: this.props.nodeState.hidden ? 'none' : ''\r\n        }\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            display: this.getChildDisplay(child),\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            zIndex: -1\r\n        }\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.x1 - child.x0)) + \"%\";\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.y1 - child.y0)) + \"%\";\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return 'visible';\r\n        return 'none';\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildSelected(child),\r\n            // hidden : this.props.parentState !== null && !this.props.parentState.selected\r\n        }\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.state.selectedChildId === child.data.id;\r\n    }\r\n\r\n    setChildSelected(child: Node) {\r\n        this.setState({ selectedChildId: child.data.id })\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChildId === null;\r\n    }\r\n\r\n    onChildClick(child: Node) {\r\n        if (!child.data.content) {\r\n            this.setChildSelected(child);\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        return this.layout.children ? this.layout.children.map((child) => {\r\n            return (\r\n                <div\r\n                    key={child.data.id}\r\n                    className='layout-child'\r\n                    onClick={() => { this.onChildClick(child); }}\r\n                    style={this.getChildStyle(child)}\r\n                >\r\n                    <Layout\r\n                        parent={this.props.node}\r\n                        parentState={this.props.nodeState}\r\n                        node={child}\r\n                        nodeState={this.getChildState(child)}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n            : [];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout'\r\n                ref={el => this.container = el}\r\n                style={this.getStyle()}\r\n            >\r\n                {\r\n                    this.props.nodeState.hidden ? undefined :\r\n                    this.props.node.data.type === 'dir' ?\r\n                        <LayoutOverlay\r\n                            node={this.props.node}\r\n                            nodeState={this.props.nodeState}\r\n                            parent={this.props.parent}\r\n                            parentState={this.props.parentState}\r\n                        />\r\n                        :\r\n                        <LayoutContent\r\n                            node={this.props.node}\r\n                            nodeState={this.props.nodeState}\r\n                            parent={this.props.parent}\r\n                            parentState={this.props.parentState}\r\n                        />\r\n\r\n                }\r\n                {this.getChildren()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout/Layout';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 500, event);\n    };\n}\n\nexport interface AppProps {\n    data : NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    state={\n        selected : false,\n    }\n\n    onNodeClick() {\n        this.setState({selected : true});\n    }\n\n    render() {\n\n        const node = treemap(this.props.data, window.innerWidth, window.innerHeight);\n        node.data.label = \"Luis Jaggy\";\n\n        return (\n            <div\n                className=\"App\"\n                onClick={this.onNodeClick.bind(this)}\n                style={{\n                    height: '100%',\n                    width: '95%',\n                    position: 'absolute',\n                    marginLeft : '2.5%'\n                }}\n            >\n                <Layout\n                    node={node}\n                    nodeState={{selected : this.state.selected }}\n                    parent={null}\n                    parentState={null}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(<App data={data as NodeData}/>, document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}