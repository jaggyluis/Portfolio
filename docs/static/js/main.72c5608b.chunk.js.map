{"version":3,"sources":["components/LayoutOverlay/LayoutOverlay.tsx","utils/treemap.ts","components/LayoutContent/LayoutContent.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LayoutOverlay","state","hovered","hidden","selected","transitionDuration","event","this","setState","stopPropagation","props","node","data","src","paths","split","Math","floor","random","width","height","position","backgroundSize","backgroundPosition","backgroundImage","getSplashImage","backgroundRepeat","transition","getTransitionDuration","willChange","background","opacity","bottom","right","left","transitionDelay","fontWeight","fontSize","lineHeight","textTransform","marginLeft","mixBlendMode","top","margin","padding","overflow","display","parentState","className","onClick","bind","onMouseEnter","onMouseLeave","style","getStyle","getSplashStyle","getColorStyle","getLSliderStyle","getSliderColorStyle","getTSliderStyle","getLabelStyle","label","React","treemap","d3","tile","x0","y0","x1","y1","children","child","sum","d","undefined","weight","content","value","sort","a","b","LayoutContent","nodeState","getImagePath","getImageStyle","borderBottom","paddingBottom","textAlign","paddingRight","map","txt","index","getContentStyle","key","v","overflowY","overflowX","getImage","getLabel","getContent","Layout","container","layout","type","id","window","innerWidth","innerHeight","selectedChildId","update","addEventListener","func","timer","clearTimeout","setTimeout","debounce","nodeData","Object","assign","filter","push","zIndex","getChildTop","getChildLeft","getChildHeight","getChildWidth","getChildDisplay","isChildSelected","areNoChildrenSelected","parent","setChildSelected","onChildClick","getChildStyle","getChildState","ref","el","getChildren","App","onNodeClick","Component","Boolean","location","hostname","match","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72c5608b.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    state = {\r\n        hovered: false,\r\n        hidden: false,\r\n        selected: false,\r\n        transitionDuration: 300\r\n    }\r\n\r\n    onMouseEnter(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: true });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onMouseLeave(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: false });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onClick() {\r\n        this.setState({ hidden: true });\r\n    }\r\n\r\n    getSplashImage(): string {\r\n        if (this.props.node.data.src) {\r\n            const paths = this.props.node.data.src.split(\".\");\r\n            const path = paths[0] + \"_s.\" + paths[1];\r\n            return path;\r\n        } else {\r\n            return '';\r\n        }\r\n        // return this.props.node.data.src || '';\r\n    }\r\n\r\n    getSplashStyle(): React.CSSProperties {\r\n\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: 'url(\"' + this.getSplashImage() + '\")',\r\n            backgroundRepeat: 'no-repeat',\r\n            // opacity: this.state.hovered ? 0 : 1,\r\n            // filter:  'blur(5px)', //'grayscale(50%)',\r\n            transition: 2 * this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getColorStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            background: 'rgba(255,255,255,0.2)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: 2 * this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getLSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            right: 0,\r\n            height: '100%',\r\n            // display: this.props.parentState == null || this.props.parentState.selected ? '' : 'none',\r\n            width: !this.state.hovered ? '80%' : '100%',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            willChange: 'width'\r\n        }\r\n    }\r\n\r\n    getTSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n            height: !this.state.hovered ? '70%' : '100%',\r\n            width: '100%',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms',\r\n            willChange: 'height'\r\n        }\r\n    }\r\n\r\n    getSliderColorStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            background: 'rgba(255,255,255,0.5)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: 'bolder',\r\n            fontSize: '40px',\r\n            lineHeight: '32px',\r\n            textTransform: 'uppercase',\r\n            marginLeft: '-2px',\r\n            mixBlendMode: 'overlay',\r\n            left: 0,\r\n            top: 0,\r\n        }\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        const padding = 0;\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2 * padding) + 'px)',\r\n            height: 'calc(100% - ' + (2 * padding) + 'px)',\r\n            // background: 'rgba(' + v + ',' + v + ',' + v + ',' + 1 + ')',\r\n            margin: padding + 'px',\r\n            overflow: 'hidden',\r\n            position: 'absolute',\r\n            display: this.state.hidden ? 'none' : '',\r\n            opacity: this.props.parentState == null || this.props.parentState.selected ? 1 : 0,\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout-overlay'\r\n                onClick={this.onClick.bind(this)}\r\n                onMouseEnter={this.onMouseEnter.bind(this)}\r\n                onMouseLeave={this.onMouseLeave.bind(this)}\r\n                style={this.getStyle()}\r\n            >\r\n                <div className='layout-splash' style={this.getSplashStyle()}></div>\r\n                <div className='layout-color' style={this.getColorStyle()}></div>\r\n                <div className='layout-lslider' style={this.getLSliderStyle()}>\r\n                    <div style={this.getSliderColorStyle()}></div>\r\n                    <div className='layout-tslider' style={this.getTSliderStyle()}>\r\n                        <div style={this.getSliderColorStyle()}></div>\r\n                        <div\r\n                            className='layout-label'\r\n                            style={this.getLabelStyle()}>{this.props.node.data.label}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        // d3.treemapBinary(node, 0, 0, width, height);\r\n        d3.treemapResquarify(node, 0, 0, width, height);\r\n        // d3.treemapSquarify(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (data: NodeData) => {\r\n        return data.weight !== undefined ? data.weight : data.content ? 2 : 1; // 1;\r\n        // return data.weight !== undefined ? data.weight : data.type === 'data' ? data.content ? 2 : 1 : 1;\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (a.value || 0) - (b.value || 0))) as Node;\r\n}","import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutContent extends React.Component<LayoutProps> {\r\n    \r\n    getImagePath() : string {\r\n        if (this.props.node.data.src) {\r\n            const paths = this.props.node.data.src.split(\".\");\r\n            const path = paths[0] + \"_s.\" + paths[1];\r\n            return path;\r\n        } else {\r\n            return '';\r\n        }\r\n        // return this.props.node.data.src || '';\r\n    }\r\n\r\n    getImageStyle() : React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundSize:  this.props.nodeState.selected ? 'contain' :'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: 'url(\"' + this.getImagePath() + '\")',\r\n            // filter: this.props.parentState?.selected ? '' : 'contrast(0.3)',\r\n            // opacity: this.props.parentState?.selected ? 1 : 0.8,\r\n            backgroundRepeat: 'no-repeat',\r\n        }\r\n    }\r\n\r\n    getImage() {\r\n        return (\r\n            <div className='layout-content-image' style={this.getImageStyle()}></div>\r\n        )\r\n    }\r\n\r\n    getContentStyle() : React.CSSProperties {\r\n        return {\r\n            margin: \"32px 30% 0 0\",\r\n            borderBottom : '2px solid black',\r\n            paddingBottom : '10px',\r\n            textAlign: 'right',\r\n            paddingRight: '10px'\r\n        }\r\n    }\r\n\r\n    getContent() {\r\n        return this.props.node.data.content ? this.props.node.data.content.map((txt, index) => {\r\n            return (\r\n                <div \r\n                    className='layout-text'\r\n                    style={this.getContentStyle()}\r\n                    key={index}\r\n                    >\r\n                    {txt}\r\n                </div>\r\n            )\r\n        }) : [];\r\n    }\r\n\r\n    getLabelStyle() : React.CSSProperties {\r\n        return {\r\n            textTransform: 'uppercase',\r\n            fontWeight : 'bold',\r\n            fontSize : '40px',\r\n            marginLeft: '-2px',\r\n            lineHeight: '31px',\r\n            position: 'relative',\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        return this.props.node.data.content ? (\r\n            <div\r\n                className='layout-label'\r\n                style={this.getLabelStyle()}\r\n            >{this.props.node.data.label}\r\n            </div>\r\n        ) : undefined;\r\n    }\r\n\r\n    getStyle() : React.CSSProperties {\r\n\r\n        const padding = 0;\r\n        const v = Math.floor(Math.random() * 50) + 200;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2*padding) + 'px)',\r\n            height: 'calc(100% - ' + (2*padding) + 'px)',\r\n            background: 'rgba(' + v + ',' + v + ',' + v + ',' + 0.2 + ')',\r\n            margin : padding + 'px' ,\r\n            position: 'absolute',\r\n            overflowY : 'auto',\r\n            overflowX : 'hidden'\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div   \r\n                className='layout-content'\r\n                style={this.getStyle()}\r\n            >   \r\n                {this.getImage()}\r\n                {this.getLabel()}\r\n                {this.getContent()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from './../../model/Node';\r\nimport { treemap } from './../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\n\r\nfunction debounce(func: any) {\r\n    var timer: any;\r\n    return function (event: any) {\r\n        if (timer) clearTimeout(timer);\r\n        timer = setTimeout(func, 500, event);\r\n    };\r\n}\r\n\r\n/**\r\n * Shuffles array in place.\r\n * @param {Array} a items An array containing the items.\r\n */\r\nfunction shuffle(a: any) {\r\n    var j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n}\r\n\r\nexport interface LayoutProps {\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onChildClick?: (child: Node) => void;\r\n}\r\nexport interface LayoutState {\r\n    selectedChildId: string | null;\r\n    transitionDuration: number;\r\n    width : number;\r\n    height : number;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap({ label: '_', type: 'dir', id: '_' }, 100, 100);\r\n\r\n    state: LayoutState = {\r\n        width : window.innerWidth,\r\n        height: window.innerHeight,\r\n        selectedChildId: null,\r\n        transitionDuration: 600\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        this.update();\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", debounce(() => {\r\n            if (this.props.nodeState.selected) {\r\n                this.setState({width : window.innerWidth, height : window.innerHeight})\r\n            }\r\n        }));\r\n    }\r\n\r\n    update() {\r\n\r\n        if (this.props.nodeState.hidden) {\r\n            this.layout = treemap({ label: '_', type: 'dir', id: '_' }, 100, 100);\r\n            this.state.selectedChildId = null;\r\n        } else {\r\n            const nodeData = Object.assign({}, this.props.node.data);\r\n            nodeData.children = !nodeData.children ? undefined : nodeData.children.filter(child => this.props.parentState?.selected || !child.content)\r\n    \r\n            // for (let i = 0; i < 1; i++) {\r\n            //     nodeData.children?.push({\r\n            //         label: \"_\",\r\n            //         type: 'data',\r\n            //     })\r\n            // }\r\n    \r\n            // shuffle(nodeData.children || []);\r\n     \r\n            if (this.props.parentState && this.props.parentState.selected && nodeData.children) {\r\n    \r\n                nodeData.children.push({\r\n                    label: this.props.node.data.label,\r\n                    id: '__label__',\r\n                    type: 'data',\r\n                    content: [], //this.props.parent ? [\"<<< \" + this.props.parent.data.label] : [],\r\n                    weight: 0.5\r\n                })\r\n    \r\n                nodeData.children?.push({\r\n                    label: '_',\r\n                    id: '__filler__',\r\n                    type: 'data',\r\n                    weight: 0.5\r\n                })\r\n            }\r\n    \r\n            this.layout = treemap(nodeData, this.state.width, this.state.height);\r\n            this.state.selectedChildId = null;\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n        // const v = Math.floor(Math.random() * 20);\r\n\r\n        return {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            // background: 'rgba(' + v + ',' + v + ',' + v + ',' + 0.5 + ')',\r\n            // border : '0.5px solid rgba(0,0,0,0.05)',\r\n            zIndex: 1,\r\n            display: this.props.nodeState.hidden ? 'none' : '',\r\n        }\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            display: this.getChildDisplay(child),\r\n            zIndex: -1,\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            // opacity: this.getChildOpacity(child),\r\n            willChange: 'top, left, height, width, display, opacity'\r\n        }\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.x1 - child.x0)) + \"%\";\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.y1 - child.y0)) + \"%\";\r\n    }\r\n\r\n    getChildOpacity(child:Node) {\r\n        return this.isChildSelected(child) || this.areNoChildrenSelected() ? 1 : 0;\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return 'visible';\r\n        return 'none';\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildSelected(child),\r\n            // hidden : this.props.parentState !== null && !this.props.parentState.selected\r\n            hidden: this.props.parent !== null && !this.props.nodeState.selected\r\n        }\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.state.selectedChildId === child.data.id;\r\n    }\r\n\r\n    setChildSelected(child: Node) {\r\n        this.setState({ selectedChildId: child.data.id })\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChildId === null;\r\n    }\r\n\r\n    onChildClick(child: Node) {\r\n        if (!child.data.content) {\r\n            this.setChildSelected(child);\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        return this.layout.children ? this.layout.children.map((child) => {\r\n            return (\r\n                <div\r\n                    key={child.data.id}\r\n                    className='layout-child'\r\n                    onClick={() => { this.onChildClick(child); }}\r\n                    style={this.getChildStyle(child)}\r\n                >\r\n                    <Layout\r\n                        parent={this.props.node}\r\n                        parentState={this.props.nodeState}\r\n                        node={child}\r\n                        nodeState={this.getChildState(child)}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n            : [];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout'\r\n                ref={el => this.container = el}\r\n                style={this.getStyle()}\r\n            >\r\n                {\r\n                    this.props.node.data.type === 'dir' ?\r\n                        <LayoutOverlay\r\n                            node={this.props.node}\r\n                            nodeState={this.props.nodeState}\r\n                            parent={this.props.parent}\r\n                            parentState={this.props.parentState}\r\n                        />\r\n                        :\r\n                        <LayoutContent\r\n                            node={this.props.node}\r\n                            nodeState={this.props.nodeState}\r\n                            parent={this.props.parent}\r\n                            parentState={this.props.parentState}\r\n                        />\r\n                }\r\n                {this.getChildren()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout/Layout';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 500, event);\n    };\n}\n\nexport interface AppProps {\n    data : NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    state={\n        selected : false,\n    }\n\n    onNodeClick() {\n        this.setState({selected : true});\n    }\n\n    render() {\n\n        const node = treemap(this.props.data, window.innerWidth, window.innerHeight);\n        node.data.label = \"Luis Jaggy\";\n\n        return (\n            <div\n                className=\"App\"\n                onClick={this.onNodeClick.bind(this)}\n                style={{\n                    height: '100%',\n                    width: '95%',\n                    position: 'absolute',\n                    marginLeft : '2.5%',\n                    overflow: 'hidden'\n                }}\n            >\n                <Layout\n                    node={node}\n                    nodeState={{selected : this.state.selected }}\n                    parent={null}\n                    parentState={null}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(<App data={data as NodeData}/>, document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}