{"version":3,"sources":["utils/treemap.ts","utils/node.ts","components/LayoutImage/LayoutImage.tsx","components/LayoutContent/LayoutContent.tsx","components/LayoutDrawLines/LayoutDrawLines.tsx","components/LayoutHeaderLabel/LayoutHeaderLabel.tsx","utils/layout.ts","components/LayoutHeader/LayoutHeader.tsx","components/LayoutOverlay/LayoutOverlay.tsx","components/Layout/Layout.tsx","utils/touch.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["treemap","data","width","height","d3","tile","node","x0","y0","x1","y1","children","child","nodeData","id","sum","d","sort","a","b","value","isTextNode","undefined","content","isImageNode","src","getNodeLabel","label","isDirectoryNode","type","isDataNode","isNodeBranch","i","length","LayoutImage","state","path","paths","split","this","props","contain","getNodeWidth","getIconPath","getMobilePath","nxtProps","nxsState","updateSrc","className","push","join","getClassName","style","backgroundImage","getPath","React","LayoutContent","nodeState","selected","map","txt","index","key","getImage","getLabel","getText","LayoutDrawLines","LayoutHeaderLabel","small","e","onNodeClick","stopPropagation","s","c","Math","ceil","fontSize","depth","onClick","bind","getStyle","isLayoutMobile","layoutProps","LayoutHeader","expanded","nodeSiblingSelectedId","nodeSiblings","sibling","nodeDepth","getPrimaryNode","getSiblingNodes","LayoutOverlay","t","fontWeight","paddingLeft","lineHeight","getLabelStyle","r","random","background","EMPTY_NODE_ARRAY","Layout","container","layout","selectedChildId","headerExpanded","transitionDuration","transitioning","el","callback","dir","swipeType","startX","startY","distX","distY","startTime","touchsurface","handletouch","evt","phase","swipetype","distance","addEventListener","touchobj","changedTouches","pageX","pageY","Date","getTime","abs","ontouch","onNodeTouch","update","nxtState","isChildSelected","areNoChildrenSelected","find","clearSelectedChildren","setTimeout","setSelectedChild","setState","position","top","getChildTop","left","getChildLeft","getChildHeight","getChildWidth","zIndex","getChildZIndex","transform","getChildTransform","transition","willChange","overflow","display","getChildrenStyle","getChildStyle","parent","parentState","getChildState","onChildClick","pointerEvents","getOverlayStyle","onHeaderNodeClick","onButtonClick","onHeaderButtonClick","nextSelectedChild","ref","tabIndex","getHeader","getChildren","getContent","getOverlay","App","window","innerWidth","innerHeight","func","timer","event","clearTimeout","debounce","paddingTop","bottom","right","padding","open","cursor","margin","paddingRight","Component","Boolean","location","hostname","match","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yZAIaA,EAAU,SAACC,EAAgBC,EAAeC,GA8BnD,OAAOC,MACFC,MA1BL,SAAcC,EAAwCC,EAAYC,EAAYC,EAAYC,GACtFN,IAAiBE,EAAM,EAAG,EAAGJ,EAAOC,GAD8D,2BAIlG,aAAqBG,EAAKK,UAAY,IAAtC,+CAA2C,CAAC,IAAjCC,EAAgC,QACvCA,EAAML,GAAKA,EAAKK,EAAML,GAAKL,GAASO,EAAKF,GACzCK,EAAMH,GAAKF,EAAKK,EAAMH,GAAKP,GAASO,EAAKF,GACzCK,EAAMJ,GAAKA,EAAKI,EAAMJ,GAAKL,GAAUO,EAAKF,GAC1CI,EAAMF,GAAKF,EAAKI,EAAMF,GAAKP,GAAUO,EAAKF,IARoD,qFAyB/FJ,CAEFA,IAAaH,GATD,SAACY,GACd,OAAIZ,EAAKa,IAAMD,EAASC,GACbD,EAASF,SAEb,MAMFI,KAAI,SAAAC,GAAC,OAfH,KAgBFC,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEC,OAAS,IAAMF,EAAEE,OAAS,QCpC5CC,EAAa,SAACf,GACvB,YAA6BgB,IAAtBhB,EAAKL,KAAKsB,SAORC,EAAc,SAAClB,GACxB,YAAyBgB,IAAlBhB,EAAKL,KAAKwB,KAORC,EAAe,SAACpB,GACzB,OAAOA,EAAKL,KAAK0B,OAAS,IAGjBC,EAAkB,SAACtB,GAC5B,MAA0B,QAAnBA,EAAKL,KAAK4B,MAGRC,EAAa,SAACxB,GACvB,MAA0B,SAAnBA,EAAKL,KAAK4B,MAGRE,EAAe,SAACzB,GACzB,IAAKA,EAAKL,KAAKU,SAAU,OAAO,EAChC,IAAK,IAAIqB,EAAI,EAAGA,EAAE1B,EAAKL,KAAKU,SAASsB,OAAQD,IACzC,GAAmC,QAA/B1B,EAAKL,KAAKU,SAASqB,GAAGH,KACtB,OAAO,EAGf,OAAO,GCxBEK,G,MAAb,2MAEIC,MAA0B,CAAEV,IAAK,MAFrC,6EAIkBW,GACV,GAAIA,EAAM,CACN,IAAMC,EAAQD,EAAKE,MAAM,KAEzB,OADoBD,EAAM,GAAK,MAAQA,EAAM,GAG7C,MAAO,KAVnB,kCAcgBD,GACR,GAAIA,EAAM,CACN,IAAMC,EAAQD,EAAKE,MAAM,KAEzB,OADoBD,EAAM,GAAK,MAAQA,EAAM,GAG7C,MAAO,KApBnB,yCAwBuBD,GACf,GAAIA,EAAM,CACN,IAAMC,EAAQD,EAAKE,MAAM,KAEzB,OADoBD,EAAM,GAAK,MAAQA,EAAM,GAG7C,MAAO,KA9BnB,gCAmCQ,IAAIZ,EAAsBc,KAAKC,MAAMlC,KDjC7BL,KAAKwB,KAAO,GCkChBvB,EAAQqC,KAAKC,MAAMtC,MAYvB,OAVKqC,KAAKC,MAAMC,UACZvC,EAAQqC,KAAKG,eAAiB,GAG9BxC,EAAQ,IACRuB,EAAMc,KAAKI,YAAYlB,GAChBvB,EAAQ,MACfuB,EAAMc,KAAKK,cAAcnB,IAGtBA,IAhDf,qCAsDQ,OAFcc,KAAKC,MAAMtC,OACPqC,KAAKC,MAAMlC,KAAKG,GAAK8B,KAAKC,MAAMlC,KAAKC,MArD/D,4CAyD0BsC,EAA4BC,GAC9C,OAAOD,EAASJ,UAAYF,KAAKC,MAAMC,SACnCI,EAAS3C,QAAUqC,KAAKC,MAAMtC,OAC9B4C,EAASrB,MAAQc,KAAKJ,MAAMV,MA5DxC,2CAgEQc,KAAKQ,cAhEb,2CAoEQR,KAAKQ,cApEb,0EAoFQ,IAAMC,EAAY,CAAC,gBAEnB,OADIT,KAAKC,MAAMC,SAASO,EAAUC,KAAK,WAChCD,EAAUE,KAAK,OAtF9B,+BA0FQ,OAWI,uBACIF,UAAWT,KAAKY,eAChBC,MAAO,CAAEC,gBAAiB,OAASd,KAAKe,UAAY,WAvGpE,GAAiCC,cCNpBC,G,MAAb,mLAGQ,GAAIhC,EAAYe,KAAKC,MAAMlC,MACvB,OAAO,gBAAC,EAAD,CACHA,KAAMiC,KAAKC,MAAMlC,KACjBmC,QAASF,KAAKC,MAAMiB,UAAUC,SAC9BxD,MAAOqC,KAAKC,MAAMtC,UAPlC,iCAcQ,GAAImB,EAAWkB,KAAKC,MAAMlC,MACtB,OAAO,uBAAK0C,UAAU,gBAAiBtB,EAAaa,KAAKC,MAAMlC,SAf3E,gCAqBQ,GAAIe,EAAWkB,KAAKC,MAAMlC,MAAO,OFtBNA,EEsBgCiC,KAAKC,MAAMlC,KFrBnEA,EAAKL,KAAKsB,SAAW,CAAC,KEqBmDoC,KAAI,SAACC,EAAKC,GAClF,OAAO,uBAAKb,UAAU,cAAcc,IAAKD,GAASD,MFvB5B,IAACtD,IECnC,qCA6BQ,MADkB,CAAC,kBACF4C,KAAK,OA7B9B,+BAiCQ,OACI,uBAAKF,UAAWT,KAAKY,gBAChBZ,KAAKwB,WACLxB,KAAKyB,WACLzB,KAAK0B,eArCtB,GAAmCV,kBCHtBW,G,MAAb,8LAE0BrB,GAClB,OAAON,KAAKC,MAAMiB,UAAUC,WAAab,EAASY,UAAUC,WAHpE,qCAOQ,IAAMV,EAAY,CAAC,qBAEnB,OADIT,KAAKC,MAAMiB,UAAUC,UAAWV,EAAUC,KAAK,UAC5CD,EAAUE,KAAK,OAT9B,+BAaQ,OACI,uBAAKF,UAAWT,KAAKY,gBACjB,uBAAKH,UAAU,sBAAsBc,IAAK,QAC1C,uBAAKd,UAAU,yBAAyBc,IAAK,WAC7C,uBAAKd,UAAU,oBAAoBc,IAAK,cAjBxD,GAAqCP,cCUxBY,EAAb,8LAE0BtB,GAClB,OAAIN,KAAKC,MAAMkB,WAAab,EAASa,UACjCnB,KAAKC,MAAM4B,QAAUvB,EAASuB,QAJ1C,iCASQ,IAAIzC,EAAQD,EAAaa,KAAKC,MAAMlC,MAEpC,OADKiC,KAAKC,MAAM4B,OAAU7B,KAAKC,MAAMkB,WAAU/B,EAAQ,KAAOA,GACvDA,IAXf,kCAcgB0C,GACJ9B,KAAKC,MAAM8B,cACX/B,KAAKC,MAAM8B,YAAY/B,KAAKC,MAAMlC,MAClC+D,EAAEE,qBAjBd,iCAuBQ,IAAMC,EAAIjC,KAAKC,MAAM4B,MAAQ,GAAK,GAC5BK,EAAIC,KAAKC,KAAKH,EAAI,GAIxB,MAAO,CACHI,SAHMJ,EADAjC,KAAKC,MAAMqC,MAAQJ,EAIX,QA7B1B,qCAkCQ,IAAMzB,EAAY,CAAC,sBAEnB,OADKT,KAAKC,MAAMkB,UAAUV,EAAUC,KAAK,WAClCD,EAAUE,KAAK,OApC9B,+BAwCQ,OACI,uBACIF,UAAWT,KAAKY,eAChB2B,QAASvC,KAAK+B,YAAYS,KAAKxC,MAC/BuB,IAAKvB,KAAKC,MAAMlC,KAAKL,KAAKa,GAAK,WAC/BsC,MAAOb,KAAKyC,YACXzC,KAAKyB,gBA9CtB,GAAuCT,aCX1B0B,EAAiB,SAACC,GAC3B,OAAOA,EAAYhF,MAAQ,KCUlBiF,G,MAAb,8LAE0BtC,GAClB,OAAIN,KAAKC,MAAM4C,WAAavC,EAASuC,WACjC7C,KAAKC,MAAMtC,QAAU2C,EAAS3C,QAC9BqC,KAAKC,MAAMiB,UAAUC,WAAab,EAASY,UAAUC,UACrDnB,KAAKC,MAAM6C,wBAA0BxC,EAASwC,0BAN1D,wCAUuB,IAAD,OACd,OACI9C,KAAKC,MAAM8C,aAAa3B,KAAI,SAAA4B,GACxB,OAAIA,EAAQtF,KAAKa,KAAO,EAAK0B,MAAMlC,KAAKL,KAAKa,GAErC,gBAAC,EAAD,CACIgD,IAAKyB,EAAQtF,KAAKa,GAAK,gBACvBR,KAAMiF,EACNV,MAAO,EAAKrC,MAAMgD,UAClB9B,UAAU,EACVU,MAAOa,EAAe,EAAKzC,OAC3B8B,YAAa,EAAK9B,MAAM8B,mBAIhC,OAzBpB,uCAgCQ,OACI,gBAAC,EAAD,CACIR,IAAKvB,KAAKC,MAAMlC,KAAKL,KAAKa,GAAK,gBAC/BR,KAAMiC,KAAKC,MAAMlC,KACjBuE,MAAOtC,KAAKC,MAAMgD,UAClB9B,UAAU,EACVU,MAAOa,EAAe1C,KAAKC,OAC3B8B,YAAa/B,KAAKC,MAAM8B,gBAvCxC,qCA6CQ,IAAMtB,EAAY,CAAC,iBAInB,OAHIT,KAAKC,MAAM4C,UAAUpC,EAAUC,KAAK,YACpCV,KAAKC,MAAMiB,UAAUC,UAAUV,EAAUC,KAAK,YAC9CgC,EAAe1C,KAAKC,QAAQQ,EAAUC,KAAK,SACxCD,EAAUE,KAAK,OAjD9B,+BAqDQ,OACI,uBAAKF,UAAWT,KAAKY,gBAChBZ,KAAKkD,iBACLlD,KAAKmD,uBAxDtB,GAAkCnC,cCNrBoC,G,MAAb,8LAE0B9C,GAClB,OAAIN,KAAKC,MAAMtC,QAAU2C,EAAS3C,OAC9BqC,KAAKC,MAAMiB,UAAUC,WAAab,EAASY,UAAUC,WAJjE,iCASQ,GAAIlC,EAAYe,KAAKC,MAAMlC,MACvB,OAAO,gBAAC,EAAD,CACHwD,IAAKvB,KAAKC,MAAMlC,KAAKL,KAAKa,GAAK,iBAC/BR,KAAMiC,KAAKC,MAAMlC,KACjBmC,QAASF,KAAKC,MAAMiB,UAAUC,SAC9BxD,MAAOqC,KAAKC,MAAMtC,UAdlC,sCAsBQ,IAAM0F,EAAIvE,EAAWkB,KAAKC,MAAMlC,MAC1BkE,EAAIS,EAAe1C,KAAKC,OAAS,GAAK,GACtCiC,EAAIC,KAAKC,KAAKH,EAAI,GAClBxD,EAAIuB,KAAKC,MAAMgD,UAAYf,EAGjC,MAAO,CACHG,UAHMgB,EAAI,GAAKpB,EAAIxD,GAGL,KACd6E,WAAYD,EAAI,YAAStE,EACzBwE,YAAaF,EAAI,OAAItE,EACrByE,WAAaH,EAAI,QAAMtE,KAhCnC,iCAqCQ,OAAO,uBAAK0B,UAAU,eAAeI,MAAOb,KAAKyD,iBAAmBtE,EAAaa,KAAKC,MAAMlC,SArCpG,iCA0CQ,IAAM2F,EAAoB,GAAhBvB,KAAKwB,SAEf,MAAO,CACHC,WAAa,OAASF,EAAI,IAAMA,EAAI,IAAMA,EAAI,OA7C1D,+BAkDQ,OACI,uBAAKjD,UAAU,iBAAiBI,MAAOb,KAAKyC,YACvCzC,KAAKwB,WACLxB,KAAKyB,gBArDtB,GAAmCT,c,MCMnC,IAAM6C,EAA2B,GAoBpBC,EAAb,2MAEIC,UAAgC,KAFpC,EAGIC,OAAevG,EAAQ,EAAKwC,MAAMlC,KAAKL,KAAM,EAAKuC,MAAMtC,MAAO,EAAKsC,MAAMrC,QAH9E,EAKIgC,MAAqB,CACjBqE,gBAAiB,KACjBC,gBAAgB,EAChBC,mBAAoB,IACpBC,eAAe,GATvB,mFAaYpE,KAAK+D,WC9CV,SAAiBM,EAAIC,GAExB,IACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAKAC,EAZIC,EAAeT,EAanBU,EAAcT,GAAY,SAASU,EAAKT,EAAKU,EAAOC,EAAWC,KAE/DL,EAAaM,iBAAiB,cAAc,SAAStD,GACjD,IAAIuD,EAAWvD,EAAEwD,eAAe,GAChCf,EAAM,OACNC,EAAY,OACL,EACPC,EAASY,EAASE,MAClBb,EAASW,EAASG,MAClBX,GAAY,IAAIY,MAAOC,UACvBX,EAAYjD,EAAG,OAAQ,QAAS0C,EAAW,MAG5C,GAEHM,EAAaM,iBAAiB,aAAa,SAAStD,GAChD,IAAIuD,EAAWvD,EAAEwD,eAAe,GAChCX,EAAQU,EAASE,MAAQd,EACzBG,EAAQS,EAASG,MAAQd,EACrBvC,KAAKwD,IAAIhB,GAASxC,KAAKwD,IAAIf,GAE3BG,EAAYjD,EADZyC,EAAOI,EAAQ,EAAI,OAAS,QACR,OAAQH,EAAWG,GAIvCI,EAAYjD,EADZyC,EAAOK,EAAQ,EAAI,KAAO,OACN,OAAQJ,EAAWI,MAG5C,GAEHE,EAAaM,iBAAiB,YAAY,SAAStD,GAChCA,EAAEwD,eAAe,IAClB,IAAIG,MAAOC,UAAYb,GAnC3B,MAqCF1C,KAAKwD,IAAIhB,IAvCT,KAuCgCxC,KAAKwD,IAAIf,IAtCzC,IAuCAJ,EAAYD,EAEPpC,KAAKwD,IAAIf,IA1Cd,KA0CqCzC,KAAKwD,IAAIhB,IAzC9C,MA0CAH,EAAYD,IAIpBQ,EAAYjD,EAAGyC,EAAK,MAAOC,EAAkB,QAAND,GAAsB,SAANA,EAAgBI,EAAQC,MAEhF,GDZKgB,CAAQ5F,KAAK+D,UAAW/D,KAAK6F,YAAYrD,KAAKxC,SAd1D,2CAmBQA,KAAK8F,OAAO9F,KAAKC,SAnBzB,0CAsBwBK,GAChBN,KAAK8F,OAAOxF,KAvBpB,4CA0B0BA,EAAuByF,GACzC,OAAI/F,KAAKC,MAAMtC,QAAU2C,EAAS3C,QAC9BqC,KAAKC,MAAMiB,UAAUC,WAAab,EAASY,UAAUC,WACrDnB,KAAKC,MAAM6C,wBAA0BxC,EAASwC,wBAC9C9C,KAAKJ,MAAMqE,kBAAoB8B,EAAS9B,kBACxCjE,KAAKJ,MAAMwE,gBAAkB2B,EAAS3B,eACtCpE,KAAKJ,MAAMsE,iBAAmB6B,EAAS7B,qBAhCnD,6BAoCW5D,GACHN,KAAKJ,MAAMsE,gBAAiB,EACxB5D,EAAS3C,QAAUqC,KAAKC,MAAMtC,OAAS2C,EAAS1C,SAAWoC,KAAKC,MAAMrC,SACtEoC,KAAKgE,OAASvG,EAAQ6C,EAASvC,KAAKL,KAAM4C,EAAS3C,MAAO2C,EAAS1C,SAElE0C,EAASY,UAAUC,WACpBnB,KAAKJ,MAAMqE,gBAAkB,QA1CzC,oCA8CkB5F,GACV,MAAO,CACH8C,SAAUnB,KAAKgG,gBAAgB3H,MAhD3C,sCAoDoBA,GACZ,OAAO2B,KAAKJ,MAAMqE,kBAAoB5F,EAAMX,KAAKa,KArDzD,8CAyDQ,OAAsC,OAA/ByB,KAAKJ,MAAMqE,kBAzD1B,0CA4DyB,IAAD,OAChB,IAAIjE,KAAKiG,yBAA4BjG,KAAKgE,OAAO5F,SAAjD,CAGI,IAAIkD,EAAuB,KACvBjD,EAAQ2B,KAAKgE,OAAO5F,SAAS8H,MAAK,SAAC7H,EAAOoB,GAC1C,QAAI,EAAKuG,gBAAgB3H,KACrBiD,EAAQ7B,GACD,MAKD,OAAV6B,IAEAA,EAAQA,IAAUtB,KAAKgE,OAAO5F,SAASsB,OAAS,EAAI,IAAM4B,GAC1DjD,EAAQ2B,KAAKgE,OAAO5F,SAASkD,MAGzBtB,KAAKmG,wBACLC,YAAW,WACP,EAAKC,iBAAiBhI,KACvB2B,KAAKJ,MAAMuE,mBAAqB,UAlFvD,uCAwFqB9F,GAAc,IAAD,OAC1B2B,KAAKsG,SAAS,CAAErC,gBAAiB5F,EAAMX,KAAKa,GAAI6F,eAAe,IAC/DgC,YAAW,WACP,EAAKE,SAAS,CAAElC,eAAe,MAChCpE,KAAKJ,MAAMuE,sBA5FtB,8CA+F6B,IAAD,OACpBnE,KAAKsG,SAAS,CAAErC,gBAAiB,KAAMG,eAAe,IACtDgC,YAAW,WACP,EAAKE,SAAS,CAAElC,eAAe,MAChCpE,KAAKJ,MAAMuE,sBAnGtB,mCAsGiB9F,IACJA,GAAUkB,EAAWlB,IAAU2B,KAAKgG,gBAAgB3H,GACrD2B,KAAKmG,wBAELnG,KAAKqG,iBAAiBhI,KA1GlC,kCA8GgBA,GACR,OAAI2B,KAAKgG,gBAAgB3H,GAAe,KAChC,IAAMA,EAAMJ,GAAM,MAhHlC,mCAmHiBI,GACT,OAAI2B,KAAKgG,gBAAgB3H,GAAe,KAChC,IAAMA,EAAML,GAAM,MArHlC,oCAwHkBK,GACV,OAAI2B,KAAKgG,gBAAgB3H,GAAe,OACpC2B,KAAKiG,wBAAiC,KAAO5H,EAAMH,GAAKG,EAAML,IAAO,IAClE,OA3Hf,qCA8HmBK,GACX,OAAI2B,KAAKgG,gBAAgB3H,GAAe,OACpC2B,KAAKiG,wBAAiC,KAAO5H,EAAMF,GAAKE,EAAMJ,IAAO,IAClE,OAjIf,qCAoImBI,GACX,OAAI2B,KAAKgG,gBAAgB3H,IAAU2B,KAAKiG,wBAAgC,EACjE,IAtIf,sCAyIoB5H,GACZ,IAAI2B,KAAKgG,gBAAgB3H,KAAU2B,KAAKiG,wBACxC,MAAO,SA3If,wCA8IsB5H,GACd,OAAI2B,KAAKgG,gBAAgB3H,GAAe,uBA/IhD,oCAmJkBA,GACV,MAAO,CACHkI,SAAU,WACVC,IAAKxG,KAAKyG,YAAYpI,GACtBqI,KAAM1G,KAAK2G,aAAatI,GACxBT,OAAQoC,KAAK4G,eAAevI,GAC5BV,MAAOqC,KAAK6G,cAAcxI,GAC1ByI,OAAQ9G,KAAK+G,eAAe1I,GAC5B2I,UAAWhH,KAAKiH,kBAAkB5I,GAClC6I,WAAYlH,KAAKJ,MAAMuE,mBAAqB,KAC5CgD,WAAY,yCA7JxB,yCAkKQ,MAAO,CACHZ,SAAU,WACV3I,OAAQoC,KAAKJ,MAAMsE,eAAiB,IAAM,OAC1CkD,SAAUpH,KAAKJ,MAAMsE,eAAiB,SAAW,UACjDvG,MAAO,OACP0J,QAASrH,KAAKC,MAAMiB,UAAUC,SAAW,GAAK,UAvK1D,oCA2KmB,IAAD,OACV,GAAInB,KAAKgE,OAAO5F,SACZ,OAAO,uBACHmD,IAAKvB,KAAKC,MAAMlC,KAAKL,KAAKa,GAAK,YAC/BkC,UAAU,kBACVI,MAAOb,KAAKsH,oBAGPtH,KAAKgE,OAAO5F,SAAUgD,KAAI,SAAC/C,GACxB,OACI,uBACIkD,IAAKlD,EAAMX,KAAKa,GAChBkC,UAAU,wBACVI,MAAO,EAAK0G,cAAclJ,IAE1B,gBAACyF,EAAD,CACInG,MAAO,EAAKsC,MAAMtC,MAClBC,OAAQ,EAAKqC,MAAMrC,OACnB4J,OAAQ,EAAKvH,MAAMlC,KACnB0J,YAAa,EAAKxH,MAAMiB,UACxBnD,KAAMM,EACN6C,UAAW,EAAKwG,cAAcrJ,GAC9B4E,UAAW,EAAKhD,MAAMgD,UAAY,EAClCF,aAAc,EAAKiB,OAAO5F,UAAYyF,EACtCf,sBAAuB,EAAKlD,MAAMqE,gBAClClC,YAAa,EAAK4F,aAAanF,KAAK,YApMxE,wCAgNQ,MAAO,CACH+D,SAAU,WACV5I,MAAO,OACPC,OAAQ,OACRgK,cAAe5H,KAAKC,MAAMiB,UAAUC,SAAW,YAASpC,EACxDsI,QAASrH,KAAKC,MAAMiB,UAAUC,SAAW,OAAS,MArN9D,mCA0NQ,GAAI9B,EAAgBW,KAAKC,MAAMlC,OAASe,EAAWkB,KAAKC,MAAMlC,MAC1D,OACI,uBAAK0C,UAAU,0BAA0BI,MAAOb,KAAK6H,mBACjD,gBAAC,EAAD,eAAetG,IAAKvB,KAAKC,MAAMlC,KAAKL,KAAKa,GAAK,YAAgByB,KAAKC,WA7NvF,mCAqOQ,GAAIV,EAAWS,KAAKC,MAAMlC,MACtB,OAAO,gBAAC,EAAD,eAAewD,IAAKvB,KAAKC,MAAMlC,KAAKL,KAAKa,GAAK,YAAiByB,KAAKC,UAtOvF,qCA4OQ,OAAO,gBAAC,EAAD,eAAiBsB,IAAKvB,KAAKC,MAAMlC,KAAKL,KAAKa,GAAK,UAAeyB,KAAKC,UA5OnF,wCA+OsBlC,GACTA,GAAQA,EAAKL,KAAKa,KAAOyB,KAAKC,MAAMlC,KAAKL,KAAKa,GAG3CyB,KAAKC,MAAM8B,aACX/B,KAAKC,MAAM8B,YAAYhE,GAH3BiC,KAAKmG,0BAjPjB,4CA0PQnG,KAAKsG,SAAS,CAAEpC,gBAAiBlE,KAAKJ,MAAMsE,mBA1PpD,kCA8PQ,GAAI7E,EAAgBW,KAAKC,MAAMlC,MAC3B,OAAO,gBAAC,EAAD,eACHwD,IAAKvB,KAAKC,MAAMlC,KAAKL,KAAKa,GAAK,WAC3ByB,KAAKC,MAFN,CAGH4C,SAAU7C,KAAKJ,MAAMsE,eACrBnC,YAAa/B,KAAK8H,kBAAkBtF,KAAKxC,MACzC+H,cAAe/H,KAAKgI,oBAAoBxF,KAAKxC,WApQ7D,kCA0QgB8B,GACJ9B,KAAKC,MAAM8B,cACX/B,KAAKC,MAAM8B,YAAY/B,KAAKC,MAAMlC,MAClC+D,EAAEE,qBA7Qd,kCAiRgBgD,EAAmDT,EAAaU,EAAeC,EAAmBC,GAQ5F,QAAVF,GAA2B,QAAPV,GAAwB,SAAPA,GACjCvE,KAAKC,MAAMiB,UAAUC,UAAY3B,EAAaQ,KAAKC,MAAMlC,QACzDiC,KAAKiI,oBACLjD,EAAIhD,qBA5RpB,qCAkSQ,IAAMvB,EAAY,CAAC,UAMnB,OALIT,KAAKC,MAAMiB,UAAUC,UAAUV,EAAUC,KAAK,YAC9CV,KAAKJ,MAAMwE,eAAe3D,EAAUC,KAAK,iBAC9BV,KAAKC,MAAMlC,KR9RjBL,KAAKU,UQ8RmBqC,EAAUC,KAAK,QAC5ClB,EAAaQ,KAAKC,MAAMlC,OAAO0C,EAAUC,KAAK,UACrB,IAAzBV,KAAKC,MAAMgD,WAAiBxC,EAAUC,KAAK,QACxCD,EAAUE,KAAK,OAxS9B,+BA2Sc,IAAD,OACL,OACI,uBACIF,UAAWT,KAAKY,eAChBsH,IAAK,SAAA7D,GAAE,OAAI,EAAKN,UAAYM,GAC5B9B,QAASvC,KAAK+B,YAAYS,KAAKxC,MAC/BmI,SAAU,GAETnI,KAAKoI,YACLpI,KAAKqI,cACLrI,KAAKsI,aACLtI,KAAKuI,kBAtTtB,GAA4BvH,a,IE4EbwH,E,2MA1FX5I,MAAQ,CACJuB,UAAU,EACVxD,MAAO8K,OAAOC,WACd9K,OAAQ6K,OAAOE,a,6EAKf3I,KAAKsG,SAAS,CAAEnF,UAAU,M,0CAIT,IAAD,OAChBsH,OAAOrD,iBAAiB,SA1BhC,SAAkBwD,GACd,IAAIC,EACJ,OAAO,SAAUC,GACTD,GAAOE,aAAaF,GACxBA,EAAQzC,WAAWwC,EAAM,IAAKE,IAsBIE,EAAS,WACvC,EAAK1C,SAAS,CAAE3I,MAAO8K,OAAOC,WAAY9K,OAAQ6K,OAAOE,oB,+BAK7D,IAAM5K,EAAON,EAAQuC,KAAKC,MAAMvC,KAAMsC,KAAKJ,MAAMjC,MAAOqC,KAAKJ,MAAMhC,QAGnE,OAFAG,EAAKL,KAAK0B,MAAQ,aAGd,yBACIqB,UAAU,UACVI,MAAO,CACHlD,MAAO,OACPC,OAAQ,OACRwJ,SAAU,SACVb,SAAU,aAGd,yBACI9F,UAAU,MACV8B,QAASvC,KAAK+B,YAAYS,KAAKxC,MAC/Ba,MAAO,CACHjD,OAAQ,oBACRqL,WAAY,OACZtL,MAAO,SAGX,kBAAC,EAAD,CACIA,MAAOqC,KAAKJ,MAAMjC,MAClBC,OAAQoC,KAAKJ,MAAMhC,OACnBG,KAAMA,EACNmD,UAAW,CAAEC,SAAUnB,KAAKJ,MAAMuB,UAClC8B,UAAW,EACXF,aAAc,GACdD,sBAAuB9C,KAAKJ,MAAMuB,SAAWpD,EAAKL,KAAKa,GAAK,KAC5DiJ,OAAQ,KACRC,YAAa,QAGrB,yBACIhH,UAAU,OACVI,MAAO,CACHjD,OAAQ,OACR2I,SAAU,WACV2C,OAAQ,IACRC,MAAO,IACP9B,QAAS,OACT+B,QAAU,aAGd,yBACI7G,QAAS,WAAQkG,OAAOY,KAAK,yCAA0C,aACvExI,MAAO,CACHyC,WAAY,OACZjB,SAAU,OACViH,OAAQ,UACR9F,WAAY,OACZ+F,OAAQ,OACRC,aAAc,SARtB,MAWA,yBACI3I,MAAO,CACHwB,SAAU,OACViH,OAAQ,UACR9F,WAAY,OACZ+F,OAAQ,SALhB,gB,GA7EFvI,IAAMyI,WCNJC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCRNhM,IAFa,aAECiM,MAAM,SAAApM,GACZA,GAAMqM,IAASC,OAAO,kBAAC,EAAD,CAAKtM,KAAMA,IAAqBuM,SAASC,eAAe,YDgIhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMP,MAAK,SAAAQ,GACjCA,EAAaC,kB","file":"static/js/main.840f68c9.chunk.js","sourcesContent":["import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    // width = 1;\r\n    // height = 1;\r\n    \r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        d3.treemapBinary(node, 0, 0, width, height);\r\n        // d3.treemapResquarify(node, 0, 0, width, height);\r\n        // d3.treemapSquarify(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (nodeData: NodeData) => {\r\n        return 1;\r\n        // return data.weight !== undefined ? data.weight : data.content ? 4 : 1; // 1;\r\n        // return data.weight !== undefined ? data.weight : data.type === 'data' ? data.content ? 2 : 1 : 1;\r\n    }\r\n\r\n    const accessor = (nodeData : NodeData) => {\r\n        if (data.id == nodeData.id) {\r\n            return nodeData.children\r\n        }\r\n        return [];\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data, accessor)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (b.value || 0) - (a.value || 0))) as Node;\r\n}","import { Node } from './../model/Node';\r\n\r\nexport const isTextNode = (node : Node) => {\r\n    return node.data.content !== undefined;\r\n}\r\n\r\nexport const getTextNodeContent = (node : Node) : string[] => {\r\n    return node.data.content || [''];\r\n}\r\n\r\nexport const isImageNode = (node : Node) => {\r\n    return node.data.src !== undefined;\r\n}\r\n\r\nexport const getImageNodeSrc = (node : Node) : string => {\r\n    return node.data.src || '';\r\n}\r\n\r\nexport const getNodeLabel = (node : Node) : string => {\r\n    return node.data.label || '';\r\n}\r\n\r\nexport const isDirectoryNode = (node : Node) => {\r\n    return node.data.type === 'dir';\r\n}\r\n\r\nexport const isDataNode = (node : Node) => {\r\n    return node.data.type === 'data';\r\n}\r\n\r\nexport const isNodeBranch = (node : Node) : boolean => {\r\n    if (!node.data.children) return false;\r\n    for (let i = 0; i<node.data.children.length; i++) {\r\n        if (node.data.children[i].type === 'dir') {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const isNodeLeaf = (node : Node) : boolean => {\r\n    return !node.data.children;\r\n}","import * as React from 'react';\r\nimport { Node } from './../../model/Node';\r\nimport './LayoutImage.css';\r\nimport { getImageNodeSrc } from '../../utils/node';\r\n\r\nexport interface LayoutImageProps {\r\n    node: Node;\r\n    contain: boolean;\r\n    width: number;\r\n}\r\nexport interface LayoutImageState {\r\n    src: string | null;\r\n}\r\nexport class LayoutImage extends React.Component<LayoutImageProps> {\r\n\r\n    state: LayoutImageState = { src: null }\r\n\r\n    getMobilePath(path: string): string {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_m.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getIconPath(path: string): string {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_i.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getPlaceholderPath(path: string): string {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_s.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getPath() {\r\n        let src = getImageNodeSrc(this.props.node);\r\n        let width = this.props.width;\r\n\r\n        if (!this.props.contain) {\r\n            width = this.getNodeWidth() / 2;\r\n        }\r\n\r\n        if (width < 300) {\r\n            src = this.getIconPath(src);\r\n        } else if (width < 600) {\r\n            src = this.getMobilePath(src);\r\n        }\r\n\r\n        return src;\r\n    }\r\n\r\n    getNodeWidth() {\r\n        const width = this.props.width;\r\n        const nodeWidth = this.props.node.x1 - this.props.node.x0;\r\n        return width * nodeWidth;\r\n    }\r\n\r\n    shouldComponentUpdate(nxtProps: LayoutImageProps, nxsState: LayoutImageState) {\r\n        return nxtProps.contain !== this.props.contain ||\r\n            nxtProps.width !== this.props.width ||\r\n            nxsState.src !== this.state.src;\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.updateSrc();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updateSrc();\r\n    }\r\n\r\n    updateSrc() {\r\n        // let src = this.getPath();\r\n\r\n        // if (src !== this.state.src) {\r\n        //     const srcImageLoader = new Image();\r\n        //     srcImageLoader.src = src;\r\n        //     srcImageLoader.onload = () => {\r\n        //         this.setState({ src });\r\n        //     };\r\n        // }\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout-image'];\r\n        if (this.props.contain) className.push('contain');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <img\r\n            //     className={this.getClassName()}\r\n            //     src={this.state.src || this.getPlaceholderPath(getImageNodeSrc(this.props.node))}\r\n            //     alt='layout-node'\r\n            // />\r\n            // <div\r\n            //     className={this.getClassName()}\r\n            //     style={{ backgroundImage:'url(' + src + ')' }}\r\n            // >\r\n            // </div>\r\n            <div\r\n                className={this.getClassName()}\r\n                style={{ backgroundImage: 'url(' + this.getPath() + ')' }}\r\n            >\r\n            </div>\r\n            // <img\r\n            //     className={this.getClassName()}\r\n            //     src={this.getPath()}\r\n            //     alt='layout-node'\r\n            // />\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { getNodeLabel, getTextNodeContent, isImageNode, isTextNode } from './../../utils/node';\r\nimport './LayoutContent.css';\r\n\r\n\r\nexport class LayoutContent extends React.PureComponent<LayoutProps> {\r\n\r\n    getImage() {\r\n        if (isImageNode(this.props.node)) {\r\n            return <LayoutImage \r\n                node={this.props.node}\r\n                contain={this.props.nodeState.selected}\r\n                width={this.props.width}\r\n                />\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getLabel() {\r\n        if (isTextNode(this.props.node)) {\r\n            return <div className='layout-label' >{getNodeLabel(this.props.node)}</div>\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getText() {\r\n        if (isTextNode(this.props.node)) return getTextNodeContent(this.props.node).map((txt, index) => {\r\n            return <div className='layout-text' key={index} >{txt}</div>\r\n        });\r\n        return undefined;\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout-content'];\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.getClassName()}>   \r\n                {this.getImage()}\r\n                {this.getLabel()}\r\n                {this.getText()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './LayoutDrawLines.css';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutDrawLines extends React.Component<LayoutProps> {\r\n\r\n    shouldComponentUpdate(nxtProps : LayoutProps) {\r\n        return this.props.nodeState.selected !== nxtProps.nodeState.selected;\r\n    }\r\n\r\n    getClassName() : string {\r\n        const className = ['layout-draw-lines'];\r\n        if (this.props.nodeState.selected)  className.push('hidden');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.getClassName()}>\r\n                <div className='line horizontal top' key={'top'}></div>\r\n                <div className='line horizontal bottom' key={'bottom'}></div>\r\n                <div className='line vertical top' key={'left'}>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}","import * as React from 'react';\r\nimport { Node } from './../../model/Node';\r\nimport { getNodeLabel } from './../../utils/node';\r\nimport { isLayoutMobile } from './../../utils/layout';\r\n\r\n\r\nexport interface LayoutHeaderLabelProps {\r\n    node: Node;\r\n    depth: number;\r\n    selected?: boolean;\r\n    small?: boolean;\r\n    onNodeClick?: (node: Node | null) => void;\r\n}\r\n\r\nexport class LayoutHeaderLabel extends React.Component<LayoutHeaderLabelProps> {\r\n\r\n    shouldComponentUpdate(nxtProps : LayoutHeaderLabelProps) {\r\n        if (this.props.selected !== nxtProps.selected) return true;\r\n        if (this.props.small !== nxtProps.small) return true;\r\n        return false;\r\n    }\r\n\r\n    getLabel(): string {\r\n        let label = getNodeLabel(this.props.node)\r\n        if (!this.props.small && !this.props.selected) label = \"/ \" + label;\r\n        return label;\r\n    }\r\n\r\n    onNodeClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        if (this.props.onNodeClick) {\r\n            this.props.onNodeClick(this.props.node);\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        const s = this.props.small ? 26 : 30;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.depth * c\r\n        const h = s - d;\r\n\r\n        return {\r\n            fontSize: h + 'px',\r\n        }\r\n    }\r\n\r\n    getClassName(): string {\r\n        const className = ['layout-header-node'];\r\n        if (!this.props.selected) className.push('sibling');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={this.getClassName()}\r\n                onClick={this.onNodeClick.bind(this)}\r\n                key={this.props.node.data.id + \"-sibling\"}\r\n                style={this.getStyle()}>\r\n                {this.getLabel()}\r\n            </div>\r\n        );\r\n    }\r\n}","\r\nimport { LayoutProps } from './../components/Layout/Layout';\r\n\r\nexport const isLayoutMobile = (layoutProps : LayoutProps) => {\r\n    return layoutProps.width < 600;\r\n} ","import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\nimport { LayoutHeaderLabel } from '../LayoutHeaderLabel/LayoutHeaderLabel';\r\nimport { isLayoutMobile } from './../../utils/layout';\r\nimport './LayoutHeader.css';\r\nimport { isNodeBranch } from '../../utils/node';\r\n\r\nexport interface LayoutHeaderProps extends LayoutProps {\r\n    expanded?: boolean;\r\n    onButtonClick?: () => void;\r\n}\r\nexport interface LayoutHeaderState {\r\n    transitionDuration: number;\r\n}\r\nexport class LayoutHeader extends React.Component<LayoutHeaderProps> {\r\n\r\n    shouldComponentUpdate(nxtProps: LayoutHeaderProps) { // NOTE - or pureComponent\r\n        if (this.props.expanded !== nxtProps.expanded) return true;\r\n        if (this.props.width !== nxtProps.width) return true;\r\n        if (this.props.nodeState.selected !== nxtProps.nodeState.selected) return true;\r\n        if (this.props.nodeSiblingSelectedId !== nxtProps.nodeSiblingSelectedId) return true;\r\n        return false;\r\n    }\r\n\r\n    getSiblingNodes() {\r\n        return (\r\n            this.props.nodeSiblings.map(sibling => {\r\n                if (sibling.data.id !== this.props.node.data.id) {\r\n                    return (\r\n                        <LayoutHeaderLabel\r\n                            key={sibling.data.id + '-header-label'}\r\n                            node={sibling}\r\n                            depth={this.props.nodeDepth}\r\n                            selected={false}\r\n                            small={isLayoutMobile(this.props)}\r\n                            onNodeClick={this.props.onNodeClick}\r\n                        />\r\n                    )\r\n                } else {\r\n                    return undefined\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    getPrimaryNode() {\r\n        return (\r\n            <LayoutHeaderLabel\r\n                key={this.props.node.data.id + '-header-label'}\r\n                node={this.props.node}\r\n                depth={this.props.nodeDepth}\r\n                selected={true}\r\n                small={isLayoutMobile(this.props)}\r\n                onNodeClick={this.props.onNodeClick}\r\n            />\r\n        )\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout-header'];\r\n        if (this.props.expanded) className.push('expanded');\r\n        if (this.props.nodeState.selected) className.push('selected');\r\n        if (isLayoutMobile(this.props)) className.push('small');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.getClassName()}>\r\n                {this.getPrimaryNode()}\r\n                {this.getSiblingNodes()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { isImageNode, isDataNode, isTextNode } from '../../utils/node';\r\nimport { LayoutProps } from '../Layout/Layout';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { isLayoutMobile } from './../../utils/layout';\r\nimport { getNodeLabel } from './../../utils/node';\r\nimport './LayoutOverlay.css';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    shouldComponentUpdate(nxtProps: LayoutProps) {\r\n        if (this.props.width !== nxtProps.width) return true;\r\n        if (this.props.nodeState.selected !== nxtProps.nodeState.selected) return true;\r\n        return false;\r\n    }\r\n\r\n    getImage() {\r\n        if (isImageNode(this.props.node)) {\r\n            return <LayoutImage\r\n                key={this.props.node.data.id + '-overlay-image'}\r\n                node={this.props.node}\r\n                contain={this.props.nodeState.selected}\r\n                width={this.props.width}\r\n            />\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n\r\n        const t = isTextNode(this.props.node)\r\n        const s = isLayoutMobile(this.props) ? 26 : 30;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = t ? 60 : s - d;\r\n\r\n        return {\r\n            fontSize: h + 'px',\r\n            fontWeight: t ? 'bold' : undefined,\r\n            paddingLeft: t ? 0 : undefined,\r\n            lineHeight : t ? 0.7 : undefined\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        return <div className='layout-label' style={this.getLabelStyle()} >{getNodeLabel(this.props.node)}</div>\r\n    }\r\n\r\n    getStyle() : React.CSSProperties {\r\n\r\n        const r = Math.random() * 75;\r\n\r\n        return {\r\n            background : 'rgb(' + r + ',' + r + ',' + r + ')'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='layout-overlay' style={this.getStyle()}>\r\n                {this.getImage()}\r\n                {this.getLabel()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Node } from '../../model/Node';\r\nimport { NodeState } from '../../model/NodeData';\r\nimport { isDataNode, isDirectoryNode, isNodeBranch, isTextNode } from '../../utils/node';\r\nimport { treemap } from '../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\nimport { LayoutDrawLines } from '../LayoutDrawLines/LayoutDrawLines';\r\nimport { LayoutHeader } from '../LayoutHeader/LayoutHeader';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport './Layout.css';\r\nimport { isLayoutMobile } from './../../utils/layout';\r\nimport { isNodeLeaf } from './../../utils/node';\r\nimport { ontouch } from './../../utils/touch';\r\n\r\nconst EMPTY_NODE_ARRAY: Node[] = [];\r\n\r\nexport interface LayoutProps {\r\n    width: number,\r\n    height: number,\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    nodeDepth: number;\r\n    nodeSiblings: Node[];\r\n    nodeSiblingSelectedId: string | null;\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onNodeClick?: (node: Node | null) => void;\r\n}\r\nexport interface LayoutState {\r\n    selectedChildId: string | null;\r\n    headerExpanded: boolean;\r\n    transitionDuration: number;\r\n    transitioning: boolean;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap(this.props.node.data, this.props.width, this.props.height);\r\n\r\n    state: LayoutState = {\r\n        selectedChildId: null,\r\n        headerExpanded: false,\r\n        transitionDuration: 400,\r\n        transitioning: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.container) {\r\n            ontouch(this.container, this.onNodeTouch.bind(this))\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update(this.props);\r\n    }\r\n\r\n    componentWillUpdate(nxtProps: LayoutProps) {\r\n        this.update(nxtProps);\r\n    }\r\n\r\n    shouldComponentUpdate(nxtProps: LayoutProps, nxtState: LayoutState) { // NOTE - or pureComponent\r\n        if (this.props.width !== nxtProps.width) return true;\r\n        if (this.props.nodeState.selected !== nxtProps.nodeState.selected) return true;\r\n        if (this.props.nodeSiblingSelectedId !== nxtProps.nodeSiblingSelectedId) return true;\r\n        if (this.state.selectedChildId !== nxtState.selectedChildId) return true;\r\n        if (this.state.transitioning !== nxtState.transitioning) return true;\r\n        if (this.state.headerExpanded !== nxtState.headerExpanded) return true;\r\n        return false;\r\n    }\r\n\r\n    update(nxtProps: LayoutProps) {\r\n        this.state.headerExpanded = false;\r\n        if (nxtProps.width !== this.props.width || nxtProps.height !== this.props.height) {\r\n            this.layout = treemap(nxtProps.node.data, nxtProps.width, nxtProps.height);\r\n        }\r\n        if (!nxtProps.nodeState.selected) {\r\n            this.state.selectedChildId = null;\r\n        }\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildSelected(child),\r\n        }\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.state.selectedChildId === child.data.id;\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChildId === null;\r\n    }\r\n\r\n    nextSelectedChild() {\r\n        if (this.areNoChildrenSelected() || !this.layout.children) {\r\n            return;\r\n        } else {\r\n            let index: number | null = null;\r\n            let child = this.layout.children.find((child, i) => {\r\n                if (this.isChildSelected(child)) {\r\n                    index = i;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n\r\n            if (index !== null) {\r\n\r\n                index = index === this.layout.children.length - 1 ? 0 : ++index;\r\n                child = this.layout.children[index];\r\n\r\n                if (child) {\r\n                    this.clearSelectedChildren();\r\n                    setTimeout(() => {\r\n                        this.setSelectedChild(child as Node);\r\n                    }, this.state.transitionDuration + 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setSelectedChild(child: Node) {\r\n        this.setState({ selectedChildId: child.data.id, transitioning: true })\r\n        setTimeout(() => {\r\n            this.setState({ transitioning: false })\r\n        }, this.state.transitionDuration)\r\n    }\r\n\r\n    clearSelectedChildren() {\r\n        this.setState({ selectedChildId: null, transitioning: true });\r\n        setTimeout(() => {\r\n            this.setState({ transitioning: false })\r\n        }, this.state.transitionDuration)\r\n    }\r\n\r\n    onChildClick(child: Node | null) {\r\n        if (!child || (isDataNode(child) && this.isChildSelected(child))) {\r\n            this.clearSelectedChildren()\r\n        } else {\r\n            this.setSelectedChild(child);\r\n        }\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return '0%';\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return '0%';\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        if (this.areNoChildrenSelected()) return (100 * (child.x1 - child.x0)) + \"%\";\r\n        return '0%';\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        if (this.areNoChildrenSelected()) return (100 * (child.y1 - child.y0)) + \"%\";\r\n        return '0%';\r\n    }\r\n\r\n    getChildZIndex(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return 2;\r\n        return 0;\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return undefined;\r\n        return 'none'\r\n    }\r\n\r\n    getChildTransform(child: Node) {\r\n        if (this.isChildSelected(child)) return 'translate3d(0,0,0)';\r\n        return 'translate3d(0,0,0)';\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            zIndex: this.getChildZIndex(child),\r\n            transform: this.getChildTransform(child),\r\n            transition: this.state.transitionDuration + 'ms',\r\n            willChange: 'top, left, height, width, transform',\r\n        }\r\n    }\r\n\r\n    getChildrenStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            height: this.state.headerExpanded ? '0' : '100%',\r\n            overflow: this.state.headerExpanded ? 'hidden' : 'visible',\r\n            width: '100%',\r\n            display: this.props.nodeState.selected ? '' : 'none',\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        if (this.layout.children) {\r\n            return <div\r\n                key={this.props.node.data.id + '-children'}\r\n                className='layout-children'\r\n                style={this.getChildrenStyle()}\r\n            >\r\n                {\r\n                    (this.layout.children).map((child) => {\r\n                        return (\r\n                            <div\r\n                                key={child.data.id}\r\n                                className='layout-child-position'\r\n                                style={this.getChildStyle(child)}\r\n                            >\r\n                                <Layout\r\n                                    width={this.props.width}\r\n                                    height={this.props.height}\r\n                                    parent={this.props.node}\r\n                                    parentState={this.props.nodeState}\r\n                                    node={child}\r\n                                    nodeState={this.getChildState(child)}\r\n                                    nodeDepth={this.props.nodeDepth + 1}\r\n                                    nodeSiblings={this.layout.children || EMPTY_NODE_ARRAY}\r\n                                    nodeSiblingSelectedId={this.state.selectedChildId}\r\n                                    onNodeClick={this.onChildClick.bind(this)}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getOverlayStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            pointerEvents: this.props.nodeState.selected ? 'none' : undefined,\r\n            display: this.props.nodeState.selected ? 'none' : '',\r\n        }\r\n    }\r\n\r\n    getOverlay() {\r\n        if (isDirectoryNode(this.props.node) || isTextNode(this.props.node)) {\r\n            return (\r\n                <div className='layout-overlay-position' style={this.getOverlayStyle()}>\r\n                    <LayoutOverlay key={this.props.node.data.id + '-overlay'} {...this.props} />\r\n                </div>\r\n            )\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getContent() {\r\n        if (isDataNode(this.props.node)) {\r\n            return <LayoutContent key={this.props.node.data.id + '-content'}  {...this.props} />\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getDrawLines() {\r\n        return <LayoutDrawLines key={this.props.node.data.id + '-lines'}  {...this.props} />\r\n    }\r\n\r\n    onHeaderNodeClick(node: Node | null) {\r\n        if (!node || node.data.id === this.props.node.data.id) {\r\n            this.clearSelectedChildren()\r\n        } else {\r\n            if (this.props.onNodeClick) {\r\n                this.props.onNodeClick(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    onHeaderButtonClick() {\r\n        this.setState({ headerExpanded: !this.state.headerExpanded })\r\n    }\r\n\r\n    getHeader() {\r\n        if (isDirectoryNode(this.props.node)) {\r\n            return <LayoutHeader\r\n                key={this.props.node.data.id + '-header'}\r\n                {...this.props}\r\n                expanded={this.state.headerExpanded}\r\n                onNodeClick={this.onHeaderNodeClick.bind(this)}\r\n                onButtonClick={this.onHeaderButtonClick.bind(this)}\r\n            />\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    onNodeClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        if (this.props.onNodeClick) {\r\n            this.props.onNodeClick(this.props.node);\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    onNodeTouch(evt: React.MouseEvent<HTMLDivElement, MouseEvent>, dir: string, phase: string, swipetype: string, distance: number) {\r\n\r\n        // evt: contains original Event object\r\n        // dir: contains \"none\", \"left\", \"right\", \"top\", or \"down\"\r\n        // phase: contains \"start\", \"move\", or \"end\"\r\n        // swipetype: contains \"none\", \"left\", \"right\", \"top\", or \"down\"\r\n        // distance: distance traveled either horizontally or vertically, depending on dir value\r\n\r\n        if (phase === 'end' && (dir == 'left' || dir == 'right')) {\r\n            if (this.props.nodeState.selected && isNodeBranch(this.props.node)) {\r\n                this.nextSelectedChild();\r\n                evt.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout'];\r\n        if (this.props.nodeState.selected) className.push('selected');\r\n        if (this.state.transitioning) className.push('transitioning');\r\n        if (isNodeLeaf(this.props.node)) className.push('leaf');\r\n        if (isNodeBranch(this.props.node)) className.push('branch');\r\n        if (this.props.nodeDepth === 0) className.push('root');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={this.getClassName()}\r\n                ref={el => this.container = el}\r\n                onClick={this.onNodeClick.bind(this)}\r\n                tabIndex={0}\r\n            >\r\n                {this.getHeader()}\r\n                {this.getChildren()}\r\n                {this.getContent()}\r\n                {this.getOverlay()}\r\n                {/* {this.getDrawLines()} */}\r\n            </div>\r\n        )\r\n    }\r\n}","// http://www.javascriptkit.com/javatutors/touchevents3.shtml\r\nexport function ontouch(el, callback){\r\n \r\n    var touchsurface = el,\r\n    dir,\r\n    dist,\r\n    swipeType,\r\n    startX,\r\n    startY,\r\n    distX,\r\n    distY,\r\n    threshold = 150, //required min distance traveled to be considered swipe\r\n    restraint = 100, // maximum distance allowed at the same time in perpendicular direction\r\n    allowedTime = 500, // maximum time allowed to travel that distance\r\n    elapsedTime,\r\n    startTime,\r\n    handletouch = callback || function(evt, dir, phase, swipetype, distance){}\r\n \r\n    touchsurface.addEventListener('touchstart', function(e){\r\n        var touchobj = e.changedTouches[0]\r\n        dir = 'none'\r\n        swipeType = 'none'\r\n        dist = 0\r\n        startX = touchobj.pageX\r\n        startY = touchobj.pageY\r\n        startTime = new Date().getTime() // record time when finger first makes contact with surface\r\n        handletouch(e, 'none', 'start', swipeType, 0) // fire callback function with params dir=\"none\", phase=\"start\", swipetype=\"none\" etc\r\n        // e.preventDefault()\r\n \r\n    }, false)\r\n \r\n    touchsurface.addEventListener('touchmove', function(e){\r\n        var touchobj = e.changedTouches[0]\r\n        distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface\r\n        distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface\r\n        if (Math.abs(distX) > Math.abs(distY)){ // if distance traveled horizontally is greater than vertically, consider this a horizontal movement\r\n            dir = (distX < 0)? 'left' : 'right'\r\n            handletouch(e, dir, 'move', swipeType, distX) // fire callback function with params dir=\"left|right\", phase=\"move\", swipetype=\"none\" etc\r\n        }\r\n        else{ // else consider this a vertical movement\r\n            dir = (distY < 0)? 'up' : 'down'\r\n            handletouch(e, dir, 'move', swipeType, distY) // fire callback function with params dir=\"up|down\", phase=\"move\", swipetype=\"none\" etc\r\n        }\r\n        // e.preventDefault() // prevent scrolling when inside DIV\r\n    }, false)\r\n \r\n    touchsurface.addEventListener('touchend', function(e){\r\n        var touchobj = e.changedTouches[0]\r\n        elapsedTime = new Date().getTime() - startTime // get time elapsed\r\n        if (elapsedTime <= allowedTime){ // first condition for awipe met\r\n            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint){ // 2nd condition for horizontal swipe met\r\n                swipeType = dir // set swipeType to either \"left\" or \"right\"\r\n            }\r\n            else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint){ // 2nd condition for vertical swipe met\r\n                swipeType = dir // set swipeType to either \"top\" or \"down\"\r\n            }\r\n        }\r\n        // Fire callback function with params dir=\"left|right|up|down\", phase=\"end\", swipetype=dir etc:\r\n        handletouch(e, dir, 'end', swipeType, (dir =='left' || dir =='right')? distX : distY)\r\n        // e.preventDefault()\r\n    }, false)\r\n}\r\n \r\n// USAGE:\r\n/*\r\nontouch(el, function(evt, dir, phase, swipetype, distance){\r\n // evt: contains original Event object\r\n // dir: contains \"none\", \"left\", \"right\", \"top\", or \"down\"\r\n // phase: contains \"start\", \"move\", or \"end\"\r\n // swipetype: contains \"none\", \"left\", \"right\", \"top\", or \"down\"\r\n // distance: distance traveled either horizontally or vertically, depending on dir value\r\n \r\n if ( phase == 'move' && (dir =='left' || dir == 'right') )\r\n  console.log('You are moving the finger horizontally by ' + distance)\r\n})\r\n*/","import React from 'react';\nimport './App.css';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\nimport LinkedIn from './assets/images/linkedIn-icon.png';\nimport { Layout } from './components/Layout/Layout';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 500, event);\n    };\n}\n\nexport interface AppProps {\n    data: NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    state = {\n        selected: true,\n        width: window.innerWidth,\n        height: window.innerHeight,\n    }\n\n    onNodeClick() {\n        // setTimeout(() => {\n        this.setState({ selected: true });\n        // }, 300)\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", debounce(() => {\n            this.setState({ width: window.innerWidth, height: window.innerHeight })\n        }));\n    }\n\n    render() {\n        const node = treemap(this.props.data, this.state.width, this.state.height);\n        node.data.label = \"Luis Jaggy\";\n\n        return (\n            <div\n                className='Wrapper'\n                style={{\n                    width: '100%',\n                    height: '100%',\n                    overflow: 'hidden',\n                    position: 'absolute'\n                }}\n            >\n                <div\n                    className=\"App\"\n                    onClick={this.onNodeClick.bind(this)}\n                    style={{\n                        height: 'calc(100% - 50px)',\n                        paddingTop: '10px',\n                        width: '100%',\n                    }}\n                >\n                    <Layout\n                        width={this.state.width}\n                        height={this.state.height}\n                        node={node}\n                        nodeState={{ selected: this.state.selected }}\n                        nodeDepth={0}\n                        nodeSiblings={[]}\n                        nodeSiblingSelectedId={this.state.selected ? node.data.id : null}\n                        parent={null}\n                        parentState={null}\n                    />\n                </div>\n                <div\n                    className='Menu'\n                    style={{\n                        height: '40px',\n                        position: 'absolute',\n                        bottom: '0',\n                        right: '0',\n                        display: 'flex',\n                        padding : '0px 10px'\n                    }}\n                >\n                    <div\n                        onClick={() => { window.open('https://www.linkedin.com/in/jaggyluis/', 'mywindow') }}\n                        style={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            cursor: 'pointer',\n                            lineHeight: '40px',\n                            margin: 'auto',\n                            paddingRight: '10px',\n                        }}\n                    >in</div>\n                    <div\n                        style={{\n                            fontSize: '18px',\n                            cursor: 'pointer',\n                            lineHeight: '40px',\n                            margin: 'auto'\n                        }}\n                    >resume</div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(<App data={data as NodeData}/>, document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}