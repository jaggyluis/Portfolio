{"version":3,"sources":["utils/treemap.ts","components/LayoutImage/LayoutImage.jsx","components/LayoutOverlay/LayoutOverlay.tsx","components/LayoutContent/LayoutContent.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["treemap","data","width","height","d3","tile","node","x0","y0","x1","y1","children","child","sum","d","undefined","weight","content","value","sort","a","b","LayoutImage","state","src","placeholder","contain","props","path","paths","split","this","window","innerWidth","getMobilePath","srcImageLoader","Image","onload","setState","nextProps","objectFit","position","filter","getPlaceholderPath","alt","style","getStyle","React","LayoutOverlay","s","c","Math","ceil","fontSize","nodeDepth","className","getSplashImagePath","getLabelStyle","label","LayoutContent","getImagePath","nodeState","selected","borderBottom","borderTop","color","marginTop","map","txt","index","getContentStyle","key","textTransform","fontWeight","lineHeight","top","mixBlendMode","overflowY","overflowX","zIndex","marginLeft","borderLeft","getImage","getLabel","getContent","Layout","container","layout","selectedChildId","visibleChildId","transitionDuration","update","parentState","isChildVisible","hidden","parent","id","type","setTimeout","setSelectedChild","clearSelectedChildren","isChildSelected","areNoChildrenSelected","getChildTop","left","getChildLeft","getChildHeight","getChildWidth","getChildZIndex","display","getChildDisplay","transition","willChange","getChildrenStyle","getChildStyle","getChildState","nodeSiblings","onNodeClick","onChildClick","bind","flexWrap","marginBottom","isSibling","h","paddingRight","getHeaderStyle","onClick","getHeaderNodeStyle","sibling","e","stopPropagation","pointerEvents","getOverlayStyle","background","bottom","innerHeight","flexDirection","margin","border","push","join","getClassName","ref","el","getHeader","getOverlay","getChildren","getDrawLines","App","addEventListener","func","timer","event","clearTimeout","debounce","Component","Boolean","location","hostname","match","then","ReactDOM","render","overflow","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a7af0bd.chunk.js","sourcesContent":["import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        d3.treemapBinary(node, 0, 0, width, height);\r\n        // d3.treemapResquarify(node, 0, 0, width, height);\r\n        // d3.treemapSquarify(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (data: NodeData) => {\r\n        return data.weight !== undefined ? data.weight : data.content ? 3 : 1; // 1;\r\n        // return data.weight !== undefined ? data.weight : data.type === 'data' ? data.content ? 2 : 1 : 1;\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (b.value || 0) - (a.value || 0))) as Node;\r\n}","import * as React from 'react'\r\n\r\nexport class LayoutImage extends React.Component {\r\n\r\n    state = { src: null, placeholder: null, contain: !!this.props.contain };\r\n\r\n    getPlaceholderPath(path) {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_s.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getMobilePath(path) {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_m.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { src } = this.props;\r\n\r\n        if (window.innerWidth < 600) src = this.getMobilePath(src);\r\n        // src = this.getPlaceholderPath(src);\r\n\r\n        const srcImageLoader = new Image();\r\n        srcImageLoader.src = src;\r\n        srcImageLoader.onload = () => {\r\n            this.setState({ src });\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return this.state.src === null || (this.state.contain !== !!nextProps.contain);\r\n    }\r\n\r\n    getStyle() {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            objectFit: this.props.contain ? 'contain' : 'cover',\r\n            position: 'absolute',\r\n            filter :  this.props.contain ? 'drop-shadow(0px 0px 1px rgba(0,0,0,.3))' : ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        this.state.contain = !!this.props.contain;\r\n\r\n        return (\r\n            <img\r\n                src={this.state.src || this.getPlaceholderPath(this.props.src)}\r\n                alt=''\r\n                style={this.getStyle()}\r\n            />\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { LayoutProps } from '../Layout/Layout';\r\nimport './LayoutOverlay.css';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    getSplashImagePath(): string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n\r\n        const s = this.props.width < 600 ? 25 : 30;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        return {\r\n            fontSize: h + 'px',\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='layout-overlay' >\r\n                <LayoutImage src={this.getSplashImagePath()} />\r\n                <div className='layout-color'></div>\r\n                <div className='layout-lslider'>\r\n                    <div className='layout-slider-color'></div>\r\n                    <div className='layout-tslider'>\r\n                        <div className='layout-slider-color'></div>\r\n                        <div className='layout-label'style={this.getLabelStyle()}>{this.props.node.data.label}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { color } from 'd3';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\n\r\nexport class LayoutContent extends React.Component<LayoutProps> {\r\n    \r\n    getImagePath() : string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getImage() {\r\n        return (\r\n            <LayoutImage \r\n                src={this.getImagePath()} \r\n                contain={this.props.nodeState.selected}\r\n            />\r\n        )\r\n    }\r\n\r\n    getContentStyle() : React.CSSProperties {\r\n        return {\r\n            borderBottom : '1px solid rgba(100,100,100,0.1)',\r\n            borderTop: '1px solid rgba(100,100,100,0.1)',\r\n            color : 'dimgrey',\r\n            // maxWidth : '500px',\r\n            marginTop: '10px'\r\n        }\r\n    }\r\n\r\n    getContent() {\r\n        return this.props.node.data.content ? this.props.node.data.content.map((txt, index) => {\r\n            return (\r\n                <div \r\n                    className='layout-text'\r\n                    style={this.getContentStyle()}\r\n                    key={index}\r\n                    >\r\n                    {txt}\r\n                </div>\r\n            )\r\n        }) : [];\r\n    }\r\n\r\n    getLabelStyle() : React.CSSProperties {\r\n        return {\r\n            textTransform: 'uppercase',\r\n            fontWeight : 'bold',\r\n            fontSize : '40px',\r\n            lineHeight: 0.8,\r\n            position: 'sticky',\r\n            top : 0,\r\n            color : '#d3d3d366',\r\n            mixBlendMode : 'multiply',\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        return this.props.node.data.content ? (\r\n            <div\r\n                className='layout-label'\r\n                style={this.getLabelStyle()}\r\n            >{this.props.node.data.label}\r\n            </div>\r\n        ) : undefined;\r\n    }\r\n\r\n    getStyle() : React.CSSProperties {\r\n        return {\r\n            width: this.props.node.data.content ? 'calc(100% - 10px)' : '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            overflowY : 'auto',\r\n            overflowX : 'hidden',\r\n            zIndex : 4,\r\n            marginLeft: this.props.node.data.content ? '10px' : '',\r\n            borderLeft: this.props.node.data.content ? '1px solid rgba(100,100,100,0.1)' : '',\r\n            fontSize : window.innerWidth < 600 ? '12px' : '14px'\r\n            // background : 'white',\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div   \r\n                className='layout-content'\r\n                style={this.getStyle()}\r\n            >   \r\n                {this.getImage()}\r\n                {this.getLabel()}\r\n                {this.getContent()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from '../../model/Node';\r\nimport { treemap } from '../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\nimport './Layout.css';\r\n\r\nexport interface LayoutProps {\r\n    width: number,\r\n    height: number,\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    nodeDepth: number;\r\n    nodeSiblings: Node[];\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onNodeClick?: (node: Node) => void;\r\n}\r\nexport interface LayoutState {\r\n    width: number;\r\n    height: number;\r\n    selectedChildId: string | null;\r\n    visibleChildId: string | null;\r\n    transitionDuration: number;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap(this.props.node.data, this.props.width, this.props.height);\r\n\r\n    state: LayoutState = {\r\n        width: this.props.width,\r\n        height: this.props.height,\r\n        selectedChildId: null,\r\n        visibleChildId: null,\r\n        transitionDuration: 400\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        this.update();\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return this.props.parentState == null || this.props.parentState.selected;\r\n    }\r\n\r\n    update() {\r\n        if (this.props.width !== this.state.width || this.props.height !== this.state.height) {\r\n            this.layout = treemap(this.props.node.data, this.props.width, this.props.height);\r\n        }\r\n        if (!this.props.nodeState.selected) {\r\n            this.state.selectedChildId = null;\r\n            this.state.visibleChildId = null;\r\n        }\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildVisible(child), //this.isChildSelected(child),\r\n            hidden: this.props.parent !== null && !this.props.nodeState.selected\r\n        }\r\n    }\r\n\r\n    isChildVisible(child: Node) {\r\n        return this.state.visibleChildId === child.data.id;\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.state.selectedChildId === child.data.id;\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChildId === null;\r\n    }\r\n\r\n    setSelectedChild(child: Node) {\r\n        if (child.data.type === 'dir') {\r\n            this.setState({ selectedChildId: child.data.id })\r\n            setTimeout(() => {\r\n                this.setState({ visibleChildId: child.data.id });\r\n            }, this.state.transitionDuration)\r\n        } else {\r\n            this.setState({ selectedChildId: child.data.id, visibleChildId: child.data.id })\r\n        }\r\n    }\r\n\r\n    clearSelectedChildren() {\r\n        this.setState({ selectedChildId: null, visibleChildId: null });\r\n    }\r\n\r\n    onChildClick(child: Node | null) {\r\n        if (!child) {\r\n            this.clearSelectedChildren()\r\n        } else {\r\n            if (!child.data.content) {\r\n                this.setSelectedChild(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return '0%';\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return '0%';\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.x1 - child.x0)) + \"%\";\r\n        // if (this.areNoChildrenSelected()) return (100 * (child.x1 - child.x0)) + \"%\";\r\n        // return '0%';\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.y1 - child.y0)) + \"%\"\r\n        // if (this.areNoChildrenSelected()) return (100 * (child.y1 - child.y0)) + \"%\";\r\n        // return '0%';\r\n    }\r\n\r\n    getChildOpacity(child: Node) {\r\n        return this.isChildSelected(child) || this.areNoChildrenSelected() ? 1 : 0;\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return '';\r\n        return 'none';\r\n    }\r\n\r\n    getChildZIndex(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return 2;\r\n        return 0;\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            zIndex: this.getChildZIndex(child),\r\n            // opacity: this.getChildOpacity(child),\r\n            display: this.getChildDisplay(child),\r\n            transition: this.state.transitionDuration + 'ms',\r\n            willChange: 'top, left, height, width, opacity'\r\n        }\r\n    }\r\n\r\n    getChildrenStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            height: '100%',\r\n            width: '100%',\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        if (!this.props.nodeState.selected) {\r\n            return undefined;\r\n        }\r\n        return <div\r\n            className='layout-children'\r\n            style={this.getChildrenStyle()}\r\n        >\r\n            {\r\n                (this.layout.children || []).map((child) => {\r\n                    return (\r\n                        <div\r\n                            key={child.data.id}\r\n                            className='layout-child-position'\r\n                            style={this.getChildStyle(child)}\r\n                        >\r\n                            <Layout\r\n                                width={this.props.width}\r\n                                height={this.props.height}\r\n                                parent={this.props.node}\r\n                                parentState={this.props.nodeState}\r\n                                node={child}\r\n                                nodeState={this.getChildState(child)}\r\n                                nodeDepth={this.props.nodeDepth + 1}\r\n                                nodeSiblings={this.layout.children || []}\r\n                                onNodeClick={this.onChildClick.bind(this)}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    }\r\n\r\n    getHeaderStyle(): React.CSSProperties {\r\n        return {\r\n            display: this.props.nodeState.selected ? 'flex' : 'none',\r\n            flexWrap: 'wrap',\r\n            marginBottom: '10px',\r\n            borderBottom: '1px solid rgba(100,100,100,0.05)'\r\n        }\r\n    }\r\n\r\n    getHeaderNodeStyle(isSibling: boolean = false): React.CSSProperties {\r\n\r\n        const s = this.props.width < 600 ? 25 : 30;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: isSibling ? 'lighter' : 'bolder',\r\n            paddingRight: '10px',\r\n            fontSize: h + 'px',\r\n            lineHeight: 0.8,\r\n            // letterSpacing: '-2px',\r\n            textTransform: 'uppercase',\r\n            mixBlendMode: 'overlay',\r\n            color: isSibling ? 'lightgrey' : 'black',\r\n            display: this.props.nodeState.selected ? '' : 'none'\r\n        }\r\n    }\r\n\r\n    getHeader() {\r\n        if (this.props.node.data.type !== 'dir') {\r\n            return undefined;\r\n        }\r\n        return (\r\n            <div className='layout-header'\r\n                style={this.getHeaderStyle()}\r\n            >\r\n                <div\r\n                    className='layout-header-node'\r\n                    onClick={this.clearSelectedChildren.bind(this)}\r\n                    style={this.getHeaderNodeStyle()}>{this.props.node.data.label}\r\n                </div>\r\n                {\r\n                    this.props.width < 600 ? undefined :\r\n                        this.props.nodeSiblings.map(sibling => {\r\n                            if (sibling.data.id !== this.props.node.data.id) {\r\n                                return (\r\n                                    <div\r\n                                        className='layout-header-node'\r\n                                        onClick={(e) => {\r\n                                            if (this.props.onNodeClick) {\r\n                                                this.props.onNodeClick(sibling);\r\n                                                e.stopPropagation();\r\n                                            }\r\n                                        }}\r\n                                        key={sibling.data.id}\r\n                                        style={this.getHeaderNodeStyle(true)}>\r\n                                        {\"/ \" + sibling.data.label}\r\n                                    </div>\r\n                                )\r\n                            } else {\r\n                                return undefined\r\n                            }\r\n                        })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getOverlayStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            pointerEvents: this.props.nodeState.selected ? 'none' : 'all',\r\n            display: this.props.nodeState.selected ? 'none' : ''\r\n            // opacity: this.props.nodeState.selected ? 0 : 1,\r\n            // transitionDelay: this.state.transitionDuration + 'ms',\r\n            // transition: this.state.transitionDuration + 'ms',\r\n        }\r\n    }\r\n\r\n    getOverlay() {\r\n        if (this.props.node.data.type !== 'dir') {\r\n            return undefined;\r\n        }\r\n        return (\r\n            <div\r\n                className='layout-overlay-position'\r\n                style={this.getOverlayStyle()}\r\n            >\r\n                <LayoutOverlay\r\n                    width={this.props.width}\r\n                    height={this.props.height}\r\n                    node={this.props.node}\r\n                    nodeState={this.props.nodeState}\r\n                    nodeDepth={this.props.nodeDepth}\r\n                    nodeSiblings={this.props.nodeSiblings}\r\n                    parent={this.props.parent}\r\n                    parentState={this.props.parentState}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getContent() {\r\n        if (this.props.node.data.type === 'dir') {\r\n            return undefined;\r\n        }\r\n        return (\r\n            <LayoutContent\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                node={this.props.node}\r\n                nodeState={this.props.nodeState}\r\n                nodeDepth={this.props.nodeDepth}\r\n                nodeSiblings={this.props.nodeSiblings}\r\n                parent={this.props.parent}\r\n                parentState={this.props.parentState}\r\n            />\r\n        )\r\n    }\r\n\r\n    getDrawLines() {\r\n        if (this.props.parentState && !this.props.parentState.selected) {\r\n            return undefined;\r\n        }\r\n        return (\r\n            <div\r\n                className='layout-draw-lines'\r\n            >\r\n                <div\r\n                    key={'top'}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        width: window.innerWidth * 3 + 'px',\r\n                        height: '1px',\r\n                        marginTop: '-1px',\r\n                        top: 0,\r\n                        left: 0,\r\n                        marginLeft: -window.innerWidth,\r\n                        pointerEvents: 'none',\r\n                        background: 'rgba(100,100,100,0.05)'\r\n                    }}\r\n                >\r\n                </div>\r\n                <div\r\n                    key={'bottom'}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        width: window.innerWidth * 3 + 'px',\r\n                        height: '1px',\r\n                        marginBottom: '-1px',\r\n                        left: 0,\r\n                        bottom: 0,\r\n                        marginLeft: -window.innerWidth,\r\n                        pointerEvents: 'none',\r\n                        background: 'rgba(100,100,100,0.05)'\r\n                    }}\r\n                >\r\n                </div>\r\n                <div\r\n                    key={'left'}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        width: '1px',\r\n                        marginLeft: '-1px',\r\n                        height: window.innerHeight * 3,\r\n                        left: 0,\r\n                        top: 0,\r\n                        marginTop: -window.innerHeight,\r\n                        pointerEvents: 'none',\r\n                        background: 'rgba(100,100,100,0.05)'\r\n                    }}\r\n                >\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            flexDirection: 'column',\r\n            zIndex: 1,\r\n            display: this.props.nodeState.hidden ? 'none' : 'flex',\r\n            margin: '-1px',\r\n            border: '1px solid rgba(100,100,100,0.05)'\r\n        }\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout'];\r\n        if (this.props.nodeState.hidden) className.push('hidden');\r\n        if (this.props.nodeState.selected) className.push('selected');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={this.getClassName()}\r\n                ref={el => this.container = el}\r\n                style={this.getStyle()}\r\n                onClick={() => {\r\n                    if (this.props.onNodeClick) {\r\n                        this.props.onNodeClick(this.props.node);\r\n                    }\r\n                }}\r\n            >\r\n                {this.getHeader()}\r\n                {this.getOverlay()}\r\n                {this.getChildren()}\r\n                {this.getContent()}\r\n                {this.getDrawLines()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\nimport { Layout } from './components/Layout/Layout';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 500, event);\n    };\n}\n\nexport interface AppProps {\n    data: NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    state = {\n        selected: false,\n        width : window.innerWidth,\n        height : window.innerHeight,\n    }\n\n    onNodeClick() {\n        // setTimeout(() => {\n            this.setState({ selected: true });\n        // }, 300)\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", debounce(() => {\n            this.setState({ width: window.innerWidth, height: window.innerHeight })\n        }));\n    }\n\n    render() {\n        const node = treemap(this.props.data, this.state.width, this.state.height);\n        node.data.label = \"Luis Jaggy\";\n\n        return (\n            <div\n                className=\"App\"\n                onClick={this.onNodeClick.bind(this)}\n                style={{\n                    height: '95%',\n                    width: '95%',\n                    position: 'absolute',\n                    marginTop: '1%',\n                    marginLeft: '2.5%',\n                }}\n            >\n                <Layout\n                    width={this.state.width}\n                    height={this.state.height}\n                    node={node}\n                    nodeState={{ selected: this.state.selected }}\n                    nodeDepth={0}\n                    nodeSiblings={[]}\n                    parent={null}\n                    parentState={null}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(\n        (\n            <div\n                className='app-wrapper'\n                style={{\n                    width: '100%',\n                    height: '100%',\n                    overflow: 'hidden',\n                    position: 'absolute'\n                }}\n            >\n                <App data={data as NodeData}/>\n            </div>\n        ), document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}