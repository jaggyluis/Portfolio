{"version":3,"sources":["utils/treemap.ts","components/LayoutImage/LayoutImage.jsx","utils/node.ts","utils/layout.ts","components/LayoutOverlay/LayoutOverlay.tsx","components/LayoutContent/LayoutContent.tsx","components/LayoutHeader/LayoutHeader.tsx","components/LayoutDrawLines/LayoutDrawLines.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["treemap","data","width","height","d3","tile","node","x0","y0","x1","y1","children","child","sum","d","undefined","weight","content","value","sort","a","b","LayoutImage","state","src","placeholder","contain","props","path","paths","split","this","window","innerWidth","getMobilePath","srcImageLoader","Image","onload","setState","nextProps","objectFit","position","filter","getPlaceholderPath","alt","style","getStyle","React","isTextNode","isImageNode","getImageNodeSrc","getNodeLabel","label","isDirectoryNode","type","isLayoutMobile","layoutProps","LayoutOverlay","nodeState","selected","s","c","Math","ceil","fontSize","nodeDepth","className","getLabelStyle","getImage","getLabel","LayoutContent","push","join","map","txt","index","key","onClick","onButtonClick","bind","getButtonStyle","right","top","borderRadius","border","textAlign","lineHeight","getClassName","getText","getButton","LayoutHeader","container","layout","visibleHeaderNodes","transitionDuration","diff","display","flexWrap","marginBottom","borderBottom","isSibling","h","fontWeight","paddingRight","textTransform","paddingTop","color","background","nodeSiblings","length","sibling","id","e","onNodeClick","stopPropagation","getHeaderNodeStyle","getHeaderNodeContent","hidden","getHeaderStyle","getPrimaryNode","getSiblingNodes","LayoutDrawLines","Layout","selectedChildId","visibleChildId","update","nxtProps","parentState","isChildVisible","parent","setSelectedChild","clearSelectedChildren","isChildSelected","areNoChildrenSelected","getChildTop","left","getChildLeft","getChildHeight","getChildWidth","zIndex","getChildZIndex","transition","willChange","getChildrenStyle","getChildStyle","getChildState","onChildClick","pointerEvents","getOverlayPositionStyle","ref","el","getHeader","getOverlay","getChildren","getContent","getDrawLines","App","innerHeight","addEventListener","func","timer","event","clearTimeout","setTimeout","debounce","marginTop","marginLeft","Component","Boolean","location","hostname","match","then","ReactDOM","render","overflow","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d29a647.chunk.js","sourcesContent":["import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        d3.treemapBinary(node, 0, 0, width, height);\r\n        // d3.treemapResquarify(node, 0, 0, width, height);\r\n        // d3.treemapSquarify(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (data: NodeData) => {\r\n        return data.weight !== undefined ? data.weight : data.content ? 3 : 1; // 1;\r\n        // return data.weight !== undefined ? data.weight : data.type === 'data' ? data.content ? 2 : 1 : 1;\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (b.value || 0) - (a.value || 0))) as Node;\r\n}","import * as React from 'react'\r\n\r\nexport class LayoutImage extends React.Component {\r\n\r\n    state = { src: null, placeholder: null, contain: !!this.props.contain };\r\n\r\n    getPlaceholderPath(path) {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_s.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getMobilePath(path) {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_m.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { src } = this.props;\r\n\r\n        if (window.innerWidth < 600) src = this.getMobilePath(src);\r\n        // src = this.getPlaceholderPath(src);\r\n\r\n        const srcImageLoader = new Image();\r\n        srcImageLoader.src = src;\r\n        srcImageLoader.onload = () => {\r\n            this.setState({ src });\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return this.state.src === null || (this.state.contain !== !!nextProps.contain);\r\n    }\r\n\r\n    getStyle() {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            objectFit: this.props.contain ? 'contain' : 'cover',\r\n            position: 'absolute',\r\n            filter :  this.props.contain ? 'drop-shadow(0px 0px 1px rgba(0,0,0,.3))' : ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        this.state.contain = !!this.props.contain;\r\n\r\n        return (\r\n            <img\r\n                src={this.state.src || this.getPlaceholderPath(this.props.src)}\r\n                alt=''\r\n                style={this.getStyle()}\r\n            />\r\n        )\r\n    }\r\n}","import { Node } from './../model/Node';\r\n\r\nexport const isTextNode = (node : Node) => {\r\n    return node.data.content !== undefined;\r\n}\r\n\r\nexport const getTextNodeContent = (node : Node) : string[] => {\r\n    return node.data.content || [''];\r\n}\r\n\r\nexport const isImageNode = (node : Node) => {\r\n    return node.data.src !== undefined;\r\n}\r\n\r\nexport const getImageNodeSrc = (node : Node) : string => {\r\n    return node.data.src || '';\r\n}\r\n\r\nexport const getNodeLabel = (node : Node) : string => {\r\n    return node.data.label || '';\r\n}\r\n\r\nexport const isDirectoryNode = (node : Node) => {\r\n    return node.data.type === 'dir';\r\n}\r\n\r\nexport const isDataNode = (node : Node) => {\r\n    return node.data.type === 'data';\r\n}","\r\nimport { LayoutProps } from './../components/Layout/Layout';\r\n\r\nexport const isLayoutMobile = (layoutProps : LayoutProps) => {\r\n    return layoutProps.width < 600;\r\n} ","import * as React from 'react';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { LayoutProps } from '../Layout/Layout';\r\nimport './LayoutOverlay.css';\r\nimport { isImageNode, getImageNodeSrc, isTextNode } from '../../utils/node';\r\nimport { isLayoutMobile } from './../../utils/layout';\r\nimport { getNodeLabel } from './../../utils/node';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    getImage() {\r\n        if (isImageNode(this.props.node)) {\r\n            return <LayoutImage src={getImageNodeSrc(this.props.node)} contain={this.props.nodeState.selected}/>\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n\r\n        const s = isLayoutMobile(this.props) ? 25 : 30;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        return {\r\n            fontSize: h + 'px',\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        // if (true) {\r\n            return <div className='layout-label' style={this.getLabelStyle()} >{getNodeLabel(this.props.node)}</div>\r\n        // }\r\n        // return undefined;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='layout-overlay' >\r\n                {this.getImage()}\r\n                <div className='layout-color'></div>\r\n                <div className='layout-lslider'>\r\n                    <div className='layout-slider-color'></div>\r\n                    <div className='layout-tslider'>\r\n                        <div className='layout-slider-color'></div>\r\n                        {this.getLabel()}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { color } from 'd3';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { LayoutProps } from '../Layout/Layout';\r\nimport './LayoutContent.css';\r\nimport { isTextNode, getTextNodeContent, isImageNode, getImageNodeSrc, getNodeLabel } from './../../utils/node';\r\n\r\nexport class LayoutContent extends React.Component<LayoutProps> {\r\n    \r\n    getClassName() {\r\n        const className = ['layout-content'];\r\n        if (isTextNode(this.props.node))  className.push('text-node');\r\n        return className.join(' ');\r\n    }\r\n\r\n    getImage() {\r\n        if (isImageNode(this.props.node)) {\r\n            return <LayoutImage src={getImageNodeSrc(this.props.node)} contain={this.props.nodeState.selected}/>\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getLabel() {\r\n        if (isTextNode(this.props.node)) {\r\n            return <div className='layout-label' >{getNodeLabel(this.props.node)}</div>\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getText() {\r\n        if (isTextNode(this.props.node)) return getTextNodeContent(this.props.node).map((txt, index) => {\r\n            return <div className='layout-text' key={index} >{txt}</div>\r\n        });\r\n        return undefined;\r\n    }\r\n\r\n    getButton() {\r\n        if (this.props.nodeState.selected) {\r\n            return <div className='layout-content-btn' onClick={this.onButtonClick.bind(this)} style={this.getButtonStyle()}>x</div>\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    onButtonClick() {\r\n\r\n    }\r\n\r\n    getButtonStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            right: 0,\r\n            top: 0,\r\n            fontSize: '25px',\r\n            height: '36px',\r\n            borderRadius: '36px',\r\n            border: '1px dashed lightgrey',\r\n            width: '36px',\r\n            textAlign: 'center',\r\n            lineHeight: '32px'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.getClassName()}>   \r\n                {this.getImage()}\r\n                {this.getLabel()}\r\n                {this.getText()}\r\n                {this.getButton()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from '../../model/Node';\r\nimport { treemap } from '../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\nimport { isLayoutMobile } from './../../utils/layout';\r\nimport './LayoutHeader.css';\r\n\r\nexport interface LayoutProps {\r\n    width: number,\r\n    height: number,\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    nodeDepth: number;\r\n    nodeSiblings: Node[];\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onNodeClick?: (node: Node) => void;\r\n}\r\nexport interface LayoutHeaderState {\r\n    visibleHeaderNodes: boolean;\r\n    transitionDuration: number;\r\n}\r\nexport class LayoutHeader extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap(this.props.node.data, this.props.width, this.props.height);\r\n\r\n    state: LayoutHeaderState = {\r\n        visibleHeaderNodes: false,\r\n        transitionDuration: 400\r\n    }\r\n\r\n    getHeaderStyle(): React.CSSProperties {\r\n\r\n        const s = isLayoutMobile(this.props) ? 25 : 30;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        let diff = 42 - h;\r\n        let display = this.props.nodeState.selected ? 'flex' : 'none';\r\n        if (isLayoutMobile(this.props) && this.props.nodeState.selected) {\r\n            display = '';\r\n        }\r\n\r\n        return {\r\n            display: display,\r\n            flexWrap: 'wrap',\r\n            marginBottom: diff + 'px',\r\n            borderBottom: '1px solid rgba(100,100,100,0.05)'\r\n        }\r\n    }\r\n\r\n    getHeaderNodeStyle(isSibling: boolean = false): React.CSSProperties {\r\n\r\n        const s = isLayoutMobile(this.props) ? 25 : 30;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        let diff = 42 - h;\r\n\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: isSibling ? 'lighter' : 'bolder',\r\n            paddingRight: '10px',\r\n            fontSize: h + 'px',\r\n            lineHeight: 0.8,\r\n            textTransform: 'uppercase',\r\n            paddingTop: isLayoutMobile(this.props) && isSibling ? diff + 'px' : '',\r\n            color: isSibling ? 'lightgrey' : 'black',\r\n            background: 'repeating-linear-gradient(-45deg,transparent,transparent 1px,rgba(100,100,100,0.1) 1px, rgba(100,100,100,0.1) 2px)',\r\n            display: this.props.nodeState.selected ? '' : 'none'\r\n        }\r\n    }\r\n\r\n    getHeaderNodeContent(node: Node): string {\r\n        let content = node.data.label;\r\n        if (!isLayoutMobile(this.props) && this.props.nodeState.selected) {\r\n            content = \"/ \" + node.data.label;\r\n        }\r\n        return content;\r\n    }\r\n\r\n    onButtonClick() {\r\n        this.setState({ visibleHeaderNodes: !this.state.visibleHeaderNodes })\r\n    }\r\n\r\n    getButtonStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            right: 0,\r\n            top: 0,\r\n            fontSize: '30px',\r\n            height: '36px',\r\n            borderRadius: '36px',\r\n            border: '1px dashed lightgrey',\r\n            width: '36px',\r\n            textAlign: 'center',\r\n            lineHeight: '36px'\r\n        }\r\n    }\r\n\r\n    getButton() {\r\n        if (this.props.nodeSiblings.length && isLayoutMobile(this.props)) {\r\n            return (\r\n                <div\r\n                    className='layout-header-btn'\r\n                    onClick={this.onButtonClick.bind(this)}\r\n                    style={this.getButtonStyle()}>\r\n                    {\r\n                        this.state.visibleHeaderNodes ? '-' : '+'\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getSiblingNodes() {\r\n        if (!isLayoutMobile(this.props) || this.state.visibleHeaderNodes) {\r\n            return (\r\n                this.props.nodeSiblings.map(sibling => {\r\n                    if (sibling.data.id !== this.props.node.data.id) {\r\n                        return (\r\n                            <div\r\n                                className='layout-header-node'\r\n                                onClick={(e) => {\r\n                                    if (this.props.onNodeClick) {\r\n                                        this.props.onNodeClick(sibling);\r\n                                        e.stopPropagation();\r\n                                        this.state.visibleHeaderNodes = false;\r\n                                    }\r\n                                }}\r\n                                key={sibling.data.id}\r\n                                style={this.getHeaderNodeStyle(true)}>\r\n                                {this.getHeaderNodeContent(sibling)}\r\n                            </div>\r\n                        )\r\n                    } else {\r\n                        return undefined\r\n                    }\r\n                })\r\n            )\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getPrimaryNode() {\r\n        return (\r\n            <div\r\n                className='layout-header-node'\r\n                // onClick={this.clearSelectedChildren.bind(this)}\r\n                onClick={(e) => {\r\n                    if (this.props.onNodeClick) {\r\n                        this.props.onNodeClick(this.props.node);\r\n                        e.stopPropagation();\r\n                        this.state.visibleHeaderNodes = false;\r\n                    }\r\n                }}\r\n                style={this.getHeaderNodeStyle()}>{this.props.node.data.label}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout'];\r\n        if (this.props.nodeState.hidden) className.push('hidden');\r\n        if (this.props.nodeState.selected) className.push('selected');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='layout-header'\r\n                style={this.getHeaderStyle()}\r\n            >\r\n                {this.getPrimaryNode()}\r\n                {this.getSiblingNodes()}\r\n                {this.getButton()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { LayoutProps } from '../LayoutHeader/LayoutHeader';\r\nimport './LayoutDrawLines.css';\r\n\r\nexport const LayoutDrawLines: React.FC<LayoutProps> = (props) => {\r\n\r\n    return (\r\n        <div className='layout-draw-lines'>\r\n            <div className='line horizontal top' key={'top'}></div>\r\n            <div className='line horizontal bottom' key={'bottom'}></div>\r\n            <div className='line vertical top' key={'left'}>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from '../../model/Node';\r\nimport { treemap } from '../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\nimport './Layout.css';\r\nimport { LayoutHeader } from '../LayoutHeader/LayoutHeader';\r\nimport { isDirectoryNode, isDataNode } from '../../utils/node';\r\nimport { LayoutDrawLines } from '../LayoutDrawLines/LayoutDrawLines';\r\n\r\nexport interface LayoutProps {\r\n    width: number,\r\n    height: number,\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    nodeDepth: number;\r\n    nodeSiblings: Node[];\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onNodeClick?: (node: Node) => void;\r\n}\r\nexport interface LayoutState {\r\n    width: number;\r\n    height: number;\r\n    selectedChildId: string | null;\r\n    visibleChildId: string | null;\r\n    visibleHeaderNodes: boolean;\r\n    transitionDuration: number;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap(this.props.node.data, this.props.width, this.props.height);\r\n\r\n    state: LayoutState = {\r\n        width: this.props.width,\r\n        height: this.props.height,\r\n        selectedChildId: null,\r\n        visibleChildId: null,\r\n        visibleHeaderNodes: false,\r\n        transitionDuration: 400\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update(this.props);\r\n    }\r\n\r\n    componentWillUpdate(nxtProps: LayoutProps) {\r\n        this.update(nxtProps);\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return this.props.parentState == null || this.props.parentState.selected;\r\n    }\r\n\r\n    isComponentMobile() {\r\n        return this.state.width < 600;\r\n    }\r\n\r\n    update(layoutProps: LayoutProps) {\r\n        if (layoutProps.width !== this.state.width || layoutProps.height !== this.state.height) {\r\n            this.layout = treemap(layoutProps.node.data, layoutProps.width, layoutProps.height);\r\n            this.state.width = layoutProps.width;\r\n            this.state.height = layoutProps.height;\r\n        }\r\n        if (!layoutProps.nodeState.selected) {\r\n            this.state.selectedChildId = null;\r\n            this.state.visibleChildId = null;\r\n        }\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildVisible(child), //this.isChildSelected(child),\r\n            hidden: this.props.parent !== null && !this.props.nodeState.selected\r\n        }\r\n    }\r\n\r\n    isChildVisible(child: Node) {\r\n        return this.state.visibleChildId === child.data.id;\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.state.selectedChildId === child.data.id;\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChildId === null;\r\n    }\r\n\r\n    setSelectedChild(child: Node) {\r\n        // if (child.data.type === 'dir') {\r\n        //     this.setState({ selectedChildId: child.data.id })\r\n        //     setTimeout(() => {\r\n        //         this.setState({ visibleChildId: child.data.id });\r\n        //     }, this.state.transitionDuration)\r\n        // } else {\r\n            this.setState({ selectedChildId: child.data.id, visibleChildId: child.data.id })\r\n        // }\r\n    }\r\n\r\n    clearSelectedChildren() {\r\n        this.setState({ selectedChildId: null, visibleChildId: null });\r\n    }\r\n\r\n    onChildClick(child: Node | null) {\r\n        if (!child) {\r\n            this.clearSelectedChildren()\r\n        } else {\r\n            if (!child.data.content) {\r\n                this.setSelectedChild(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return '0%';\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return '0%';\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        // return (100 * (child.x1 - child.x0)) + \"%\";\r\n        if (this.areNoChildrenSelected()) return (100 * (child.x1 - child.x0)) + \"%\";\r\n        return '0%';\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        // return (100 * (child.y1 - child.y0)) + \"%\"\r\n        if (this.areNoChildrenSelected()) return (100 * (child.y1 - child.y0)) + \"%\";\r\n        return '0%';\r\n    }\r\n\r\n    getChildOpacity(child: Node) {\r\n        return this.isChildSelected(child) || this.areNoChildrenSelected() ? 1 : 0;\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return '';\r\n        return 'none';\r\n    }\r\n\r\n    getChildZIndex(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return 2;\r\n        return 0;\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            zIndex: this.getChildZIndex(child),\r\n            // opacity: this.getChildOpacity(child),\r\n            // display: this.getChildDisplay(child),\r\n            transition: this.state.transitionDuration + 'ms',\r\n            willChange: 'top, left, height, width, opacity'\r\n        }\r\n    }\r\n\r\n    getChildrenStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            height: '100%',\r\n            width: '100%',\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        if (!this.props.nodeState.selected) {\r\n            return undefined;\r\n        }\r\n        return <div\r\n            className='layout-children'\r\n            style={this.getChildrenStyle()}\r\n        >\r\n            {\r\n                (this.layout.children || []).map((child) => {\r\n                    return (\r\n                        <div\r\n                            key={child.data.id}\r\n                            className='layout-child-position'\r\n                            style={this.getChildStyle(child)}\r\n                        >\r\n                            <Layout\r\n                                width={this.props.width}\r\n                                height={this.props.height}\r\n                                parent={this.props.node}\r\n                                parentState={this.props.nodeState}\r\n                                node={child}\r\n                                nodeState={this.getChildState(child)}\r\n                                nodeDepth={this.props.nodeDepth + 1}\r\n                                nodeSiblings={this.layout.children || []}\r\n                                onNodeClick={this.onChildClick.bind(this)}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    }\r\n\r\n    getOverlayPositionStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            pointerEvents: this.props.nodeState.selected ? 'none' : 'all',\r\n            display: this.props.nodeState.selected ? 'none' : ''\r\n            // opacity: this.props.nodeState.selected ? 0 : 1,\r\n            // transitionDelay: this.state.transitionDuration + 'ms',\r\n            // transition: this.state.transitionDuration + 'ms',\r\n        }\r\n    }\r\n\r\n    getOverlay() {\r\n        if (isDirectoryNode(this.props.node)) {\r\n            return (\r\n                <div className='layout-overlay-position'style={this.getOverlayPositionStyle()}>\r\n                    <LayoutOverlay {...this.props} />\r\n                </div>\r\n            )\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getContent() {\r\n        if (isDataNode(this.props.node)) {\r\n            return <LayoutContent {...this.props} />\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getDrawLines() {\r\n        if (!this.props.parentState || this.props.parentState.selected) {\r\n            return <LayoutDrawLines {...this.props} />\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getHeader() {\r\n        if (isDirectoryNode(this.props.node)) {\r\n            return <LayoutHeader {...this.props} onNodeClick={(node) => {\r\n                if (node.data.id === this.props.node.data.id) {\r\n                    this.clearSelectedChildren()\r\n                } else {\r\n                    if (this.props.onNodeClick) {\r\n                        this.props.onNodeClick(node);\r\n                    }\r\n                }\r\n            }} />\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout'];\r\n        if (this.props.nodeState.hidden) className.push('hidden');\r\n        if (this.props.nodeState.selected) className.push('selected');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={this.getClassName()}\r\n                ref={el => this.container = el}\r\n                onClick={(e) => {\r\n                    if (this.props.onNodeClick) {\r\n                        this.props.onNodeClick(this.props.node);\r\n                        e.stopPropagation();\r\n                    }\r\n                }}\r\n            >\r\n                {this.getHeader()}\r\n                {this.getOverlay()}\r\n                {this.getChildren()}\r\n                {this.getContent()}\r\n                {this.getDrawLines()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\nimport LinkedIn from './assets/images/linkedIn-icon.png';\nimport { Layout } from './components/Layout/Layout';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 500, event);\n    };\n}\n\nexport interface AppProps {\n    data: NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    state = {\n        selected: false,\n        width : window.innerWidth,\n        height : window.innerHeight,\n    }\n\n    onNodeClick() {\n        // setTimeout(() => {\n            this.setState({ selected: true });\n        // }, 300)\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", debounce(() => {\n            this.setState({ width: window.innerWidth, height: window.innerHeight })\n        }));\n    }\n\n    render() {\n        const node = treemap(this.props.data, this.state.width, this.state.height);\n        node.data.label = \"Luis Jaggy\";\n\n        return (\n            <div\n                className=\"App\"\n                onClick={this.onNodeClick.bind(this)}\n                style={{\n                    height: '95%',\n                    width: '95%',\n                    position: 'absolute',\n                    marginTop: '1%',\n                    marginLeft: '2.5%',\n                }}\n            >\n                <Layout\n                    width={this.state.width}\n                    height={this.state.height}\n                    node={node}\n                    nodeState={{ selected: this.state.selected }}\n                    nodeDepth={0}\n                    nodeSiblings={[]}\n                    parent={null}\n                    parentState={null}\n                />\n                <div\n                    style={{\n                        height : '5%',\n                        width : '5%',\n                        position : 'absolute',\n                        top : '100%',\n                    }}\n                >\n                {/* <img\n                    style={{\n                        width : '100%',\n                        height : '100%',\n                    }} \n                    src={LinkedIn} \n                /> */}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(\n        (\n            <div\n                className='app-wrapper'\n                style={{\n                    width: '100%',\n                    height: '100%',\n                    overflow: 'hidden',\n                    position: 'absolute'\n                }}\n            >\n                <App data={data as NodeData}/>\n            </div>\n        ), document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}