{"version":3,"sources":["utils/treemap.ts","components/LayoutImage/LayoutImage.jsx","components/LayoutOverlay/LayoutOverlay.tsx","components/LayoutContent/LayoutContent.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["treemap","data","width","height","d3","tile","node","x0","y0","x1","y1","children","child","sum","d","undefined","weight","content","value","sort","a","b","LayoutImage","state","src","placeholder","path","paths","split","this","props","window","innerWidth","getMobilePath","srcImageLoader","Image","onload","setState","objectFit","contain","position","getPlaceholderPath","alt","style","getStyle","React","LayoutOverlay","hovered","hidden","selected","transitionDuration","event","stopPropagation","Math","floor","random","opacity","transition","getTransitionDuration","willChange","background","bottom","right","borderLeft","transform","WebkitTransform","left","marginLeft","paddingLeft","borderTop","transitionDelay","s","c","ceil","fontWeight","fontSize","nodeDepth","lineHeight","textTransform","mixBlendMode","wordBreak","color","top","margin","padding","overflow","zIndex","display","parentState","className","onClick","bind","onMouseEnter","onMouseLeave","getSplashImagePath","getColorStyle","getLSliderStyle","getSliderColorStyle","getTSliderStyle","getLabelStyle","label","LayoutContent","getImagePath","nodeState","borderBottom","maxWidth","map","txt","index","getContentStyle","key","v","overflowY","overflowX","getImage","getLabel","getContent","Layout","container","layout","type","id","selectedChildId","update","areNoChildrenSelected","nodeData","Object","assign","filter","isChildSelected","parent","console","log","setSelectedChild","flexWrap","marginBottom","isSibling","h","paddingRight","getHeaderStyle","getHeaderNodeStyle","nodeSiblings","sibling","onSiblingClick","getChildTop","getChildLeft","getChildHeight","getChildWidth","getChildDisplay","getChildOpacity","onChildClick","getChildStyle","getChildState","marginTop","pointerEvents","innerHeight","flexDirection","border","push","join","getClassName","ref","el","getHeader","getOverlay","getChildrenStyle","getChildren","getDrawLines","App","addEventListener","func","timer","clearTimeout","setTimeout","debounce","onNodeClick","Component","Boolean","location","hostname","match","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.291c3b36.chunk.js","sourcesContent":["import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        d3.treemapBinary(node, 0, 0, width, height);\r\n        // d3.treemapResquarify(node, 0, 0, width, height);\r\n        // d3.treemapSquarify(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (data: NodeData) => {\r\n        return data.weight !== undefined ? data.weight : data.content ? 3 : 1; // 1;\r\n        // return data.weight !== undefined ? data.weight : data.type === 'data' ? data.content ? 2 : 1 : 1;\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (b.value || 0) - (a.value || 0))) as Node;\r\n}","import * as React from 'react'\r\n\r\nexport class LayoutImage extends React.Component {\r\n    state = { src: null, placeholder : null };\r\n\r\n    getPlaceholderPath(path) {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_s.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getMobilePath(path) {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_m.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { src } = this.props;\r\n\r\n        if (window.innerWidth < 1200) src = this.getMobilePath(src);\r\n\r\n        const srcImageLoader = new Image();\r\n        srcImageLoader.src = src;\r\n        srcImageLoader.onload = () => {\r\n            this.setState({ src });\r\n        };\r\n    }\r\n\r\n    getStyle() {\r\n        return { \r\n            width: '100%', \r\n            height: '100%', \r\n            objectFit:  this.props.contain ? 'contain' : 'cover', \r\n            position: 'absolute',\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // return <div></div>\r\n        // console.log(this.state.src, this.state.placeholder)\r\n        return <img src={this.state.src || this.getPlaceholderPath(this.props.src)} alt='' style={this.getStyle()}/>;\r\n\r\n        // const url = this.state.src ? this.state.src : this.state.placeholder ? this.state.placeholder : ''\r\n\r\n        // return <div style={{\r\n        //     position: 'absolute',\r\n        //     width: '100%',\r\n        //     height: '100%',\r\n        //     backgroundSize:  'cover',\r\n        //     backgroundPosition: 'center',\r\n        //     backgroundImage: 'url(\"' + url + '\")',\r\n        //     backgroundRepeat: 'no-repeat',\r\n        // }}></div>\r\n    }\r\n}","import * as React from 'react';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    state = {\r\n        hovered: false,\r\n        hidden: false,\r\n        selected: false,\r\n        transitionDuration: 300\r\n    }\r\n\r\n    onMouseEnter(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: true });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onMouseLeave(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: false });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onClick() {\r\n        // setTimeout(() => {\r\n            this.setState({ hidden: true });\r\n        // }, this.state.transitionDuration * 3);   \r\n    }\r\n\r\n    getSplashImagePath(): string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getSplashStyle(): React.CSSProperties {\r\n\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            opacity : this.state.hovered ? 0 : 1,\r\n            transition: 2 * this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getColorStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n             background: 'rgba(255,255,255,0.2)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: 2 * this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getLSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            right: 0,\r\n            height: '100%',\r\n            width : '100%',\r\n            borderLeft : '1px solid rgba(100,100,100,0.1)',\r\n            transform : !this.state.hovered ? 'translate(20%, 0)' : '',\r\n            WebkitTransform: !this.state.hovered ? 'translate(20%, 0)' : '',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            willChange: 'transform'\r\n        }\r\n    }\r\n\r\n    getTSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n            height : '100%',\r\n            width: '100%',\r\n            marginLeft : '-25%',\r\n            paddingLeft : '25%',\r\n            borderTop : '1px solid rgba(100,100,100,0.1)',\r\n            transform : !this.state.hovered ? 'translate(0, 30%)' : '',\r\n            WebkitTransform : !this.state.hovered ? 'translate(0, 30%)' : '',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms',\r\n            willChange : 'transform'\r\n        }\r\n    }\r\n\r\n    getSliderColorStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            // background: 'rgba(255,255,255,0.5)',\r\n            background: 'repeating-linear-gradient(-45deg,transparent,transparent 2px,rgba(100,100,100,0.1) 2px, rgba(100,100,100,0.1) 4px)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n\r\n        const s = window.innerWidth < 600 ? 30 : 40;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: 'bolder',\r\n            fontSize: h + 'px',\r\n            lineHeight: 0.8,\r\n            textTransform: 'uppercase',\r\n            mixBlendMode: 'overlay',\r\n            wordBreak: 'break-all',\r\n            background: 'repeating-linear-gradient(45deg,transparent,transparent 2px,rgba(100,100,100,0.1) 2px, rgba(100,100,100,0.1) 4px)',\r\n            // backgroundClip: 'text',\r\n            // WebkitBackgroundClip: 'text',\r\n            // WebkitTextFillColor: 'transparent',\r\n            color: 'white',\r\n            left: 0,\r\n            top: 0,\r\n        }\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        const padding = 0;\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2 * padding) + 'px)',\r\n            height: 'calc(100% - ' + (2 * padding) + 'px)',\r\n            // background: 'rgba(' + v + ',' + v + ',' + v + ',' + 1 + ')',\r\n            margin: padding + 'px',\r\n            overflow: 'hidden',\r\n            position: 'absolute',\r\n            zIndex: 2,\r\n            display: this.state.hidden ? 'none' : '',\r\n            opacity: this.props.parentState == null || this.props.parentState.selected ? 1 : 0,\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout-overlay'\r\n                onClick={this.onClick.bind(this)}\r\n                onMouseEnter={this.onMouseEnter.bind(this)}\r\n                onMouseLeave={this.onMouseLeave.bind(this)}\r\n                style={this.getStyle()}\r\n            >\r\n                <LayoutImage src={this.getSplashImagePath()} />\r\n                <div className='layout-color' style={this.getColorStyle()}></div>\r\n                <div className='layout-lslider' style={this.getLSliderStyle()}>\r\n                    <div style={this.getSliderColorStyle()}></div>\r\n                    <div className='layout-tslider' style={this.getTSliderStyle()}>\r\n                        <div style={this.getSliderColorStyle()}></div>\r\n                        <div\r\n                            className='layout-label'\r\n                            style={this.getLabelStyle()}>{this.props.node.data.label}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { color } from 'd3';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutContent extends React.Component<LayoutProps> {\r\n    \r\n    getImagePath() : string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getImage() {\r\n        return (\r\n            <LayoutImage \r\n                src={this.getImagePath()} \r\n                contain={this.props.nodeState.selected}\r\n            />\r\n        )\r\n    }\r\n\r\n    getContentStyle() : React.CSSProperties {\r\n        return {\r\n            borderBottom : '1px solid rgba(100,100,100,0.1)',\r\n            color : 'dimgrey',\r\n            maxWidth : '500px',\r\n        }\r\n    }\r\n\r\n    getContent() {\r\n        return this.props.node.data.content ? this.props.node.data.content.map((txt, index) => {\r\n            return (\r\n                <div \r\n                    className='layout-text'\r\n                    style={this.getContentStyle()}\r\n                    key={index}\r\n                    >\r\n                    {txt}\r\n                </div>\r\n            )\r\n        }) : [];\r\n    }\r\n\r\n    getLabelStyle() : React.CSSProperties {\r\n        return {\r\n            textTransform: 'uppercase',\r\n            fontWeight : 'bold',\r\n            fontSize : '40px',\r\n            lineHeight: 0.8,\r\n            position: 'sticky',\r\n            top : 0,\r\n            color : 'lightgrey',\r\n            mixBlendMode : 'multiply'\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        return this.props.node.data.content ? (\r\n            <div\r\n                className='layout-label'\r\n                style={this.getLabelStyle()}\r\n            >{this.props.node.data.label}\r\n            </div>\r\n        ) : undefined;\r\n    }\r\n\r\n    getStyle() : React.CSSProperties {\r\n\r\n        const padding = 0;\r\n        const v = Math.floor(Math.random() * 50) + 200;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2*padding) + 'px)',\r\n            height: 'calc(100% - ' + (2*padding) + 'px)',\r\n            background: this.props.node.data.content ? '' : 'rgba(' + v + ',' + v + ',' + v + ',' + 0.2 + ')',\r\n            margin : padding + 'px' ,\r\n            position: 'absolute',\r\n            overflowY : 'auto',\r\n            overflowX : 'hidden',\r\n            zIndex : 1\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div   \r\n                className='layout-content'\r\n                style={this.getStyle()}\r\n            >   \r\n                {this.getImage()}\r\n                {this.getLabel()}\r\n                {this.getContent()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from '../../model/Node';\r\nimport { treemap } from '../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\nimport './Layout.css';\r\n\r\n/**\r\n * Shuffles array in place.\r\n * @param {Array} a items An array containing the items.\r\n */\r\nfunction shuffle(a: any) {\r\n    var j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n}\r\n\r\nexport interface LayoutProps {\r\n    width: number,\r\n    height: number,\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    nodeDepth: number;\r\n    nodeSiblings: Node[];\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onChildClick?: (child: Node) => void;\r\n    onSiblingClick?:(sibling: Node) => void;\r\n}\r\nexport interface LayoutState {\r\n    selectedChildId: string | null;\r\n    transitionDuration: number;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap({ label: '_', type: 'dir', id: '_' }, 100, 100);\r\n\r\n    state: LayoutState = {\r\n        selectedChildId: null,\r\n        transitionDuration: 0\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        if (!this.areNoChildrenSelected()) {\r\n            return;\r\n        }\r\n        if (this.props.nodeState.hidden) {\r\n            this.layout = treemap({ label: '_', type: 'dir', id: '_' }, 100, 100);\r\n            this.state.selectedChildId = null;\r\n        } else {\r\n            const nodeData = Object.assign({}, this.props.node.data);\r\n            nodeData.children = !nodeData.children ? undefined : nodeData.children.filter(child => this.props.parentState?.selected || !child.content)\r\n\r\n            this.layout = treemap(nodeData, this.props.width, this.props.height);\r\n            this.state.selectedChildId = null;\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildSelected(child),\r\n            hidden: this.props.parent !== null && !this.props.nodeState.selected\r\n        }\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.state.selectedChildId === child.data.id;\r\n    }\r\n\r\n    setSelectedChild(child: Node | null) {\r\n        console.log(this.props.node.data.label, child?.data.label)\r\n        this.setState({ selectedChildId: child === null ? null : child.data.id })\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChildId === null;\r\n    }\r\n\r\n    onChildClick(child: Node) {\r\n        if (!child.data.content) {\r\n            this.setSelectedChild(child);\r\n        }\r\n    }\r\n\r\n    getHeaderStyle(): React.CSSProperties {\r\n        return {\r\n            display: this.props.nodeState.selected ? 'flex' : 'none',\r\n            flexWrap: 'wrap',\r\n            marginBottom: '10px',\r\n            borderBottom: '1px solid rgba(100,100,100,0.05)'\r\n        }\r\n    }\r\n\r\n    getHeaderNodeStyle(isSibling: boolean = false): React.CSSProperties {\r\n\r\n        const s = this.props.width < 600 ? 30 : 40;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: isSibling ? 'lighter' : 'bolder',\r\n            paddingRight: '10px',\r\n            fontSize: h + 'px',\r\n            lineHeight: 0.8,\r\n            textTransform: 'uppercase',\r\n            mixBlendMode: 'overlay',\r\n            color: isSibling ? 'lightgrey' : 'black',\r\n            opacity: this.props.nodeState.selected ? 1 : 0,\r\n        }\r\n    }\r\n\r\n    getHeader() {\r\n        if (!this.props.parentState || (this.props.parentState &&\r\n            this.props.parentState.selected &&\r\n            this.props.node.data.type === 'dir')) {\r\n            return (\r\n                <div className='layout-header' \r\n                    // onClick={this.onHeaderClick.bind(this)}\r\n                    style={this.getHeaderStyle()}\r\n                    >\r\n                    <div \r\n                        className='layout-header-node' \r\n                        style={this.getHeaderNodeStyle()}>{this.props.node.data.label}\r\n                    </div>\r\n                    {\r\n                        this.props.width < 600 ? undefined :\r\n                            this.props.nodeSiblings.map(sibling => {\r\n                                if (sibling.data.id !== this.props.node.data.id) {\r\n                                    return (\r\n                                        <div\r\n                                            className='layout-header-node'\r\n                                            onClick={() => {\r\n                                                if (this.props.onSiblingClick) {\r\n                                                    this.props.onSiblingClick(sibling);\r\n                                                }\r\n                                             }}\r\n                                            key={sibling.data.id}\r\n                                            style={this.getHeaderNodeStyle(true)}>\r\n                                            {\"/ \" + sibling.data.label}\r\n                                        </div>\r\n                                    )\r\n                                } else {\r\n                                    return undefined\r\n                                }\r\n                            })\r\n                    }\r\n                </div>\r\n            )\r\n        } else return undefined;\r\n    }\r\n\r\n    getOverlay() {\r\n        return this.props.node.data.type === 'dir' ?\r\n            <LayoutOverlay\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                node={this.props.node}\r\n                nodeState={this.props.nodeState}\r\n                nodeDepth={this.props.nodeDepth}\r\n                nodeSiblings={this.props.nodeSiblings}\r\n                parent={this.props.parent}\r\n                parentState={this.props.parentState}\r\n            />\r\n            :\r\n            <LayoutContent\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                node={this.props.node}\r\n                nodeState={this.props.nodeState}\r\n                nodeDepth={this.props.nodeDepth}\r\n                nodeSiblings={this.props.nodeSiblings}\r\n                parent={this.props.parent}\r\n                parentState={this.props.parentState}\r\n            />\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.x1 - child.x0)) + \"%\";\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.y1 - child.y0)) + \"%\";\r\n    }\r\n\r\n    getChildOpacity(child: Node) {\r\n        return this.isChildSelected(child) || this.areNoChildrenSelected() ? 1 : 0;\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return 'visible';\r\n        return 'none';\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            display: this.getChildDisplay(child),\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            opacity: this.getChildOpacity(child),\r\n            willChange: 'top, left, height, width, opacity'\r\n        }\r\n    }\r\n\r\n    getChildrenStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            height: '100%',\r\n            width: '100%',\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        // if (this.props.nodeState.selected) {\r\n        return this.layout.children ? this.layout.children.map((child) => {\r\n            return (\r\n                <div\r\n                    key={child.data.id}\r\n                    className='layout-child'\r\n                    onClick={() => { this.onChildClick(child); }}\r\n                    style={this.getChildStyle(child)}\r\n                >\r\n                    <Layout\r\n                        width={this.props.width}\r\n                        height={this.props.height}\r\n                        parent={this.props.node}\r\n                        parentState={this.props.nodeState}\r\n                        node={child}\r\n                        nodeState={this.getChildState(child)}\r\n                        nodeDepth={this.props.nodeDepth + 1}\r\n                        nodeSiblings={this.layout.children || []}\r\n                        onSiblingClick={this.setSelectedChild.bind(this)}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n            : [];\r\n        // } else {\r\n        //     return undefined;\r\n        // }\r\n    }\r\n\r\n    getDrawLines() {\r\n        return [\r\n            <div\r\n                key={'top'}\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: window.innerWidth * 3 + 'px',\r\n                    height: '1px',\r\n                    marginTop: '-1px',\r\n                    top: 0,\r\n                    left: 0,\r\n                    marginLeft: -window.innerWidth,\r\n                    pointerEvents: 'none',\r\n                    background: 'rgba(100,100,100,0.05)'\r\n                }}\r\n            >\r\n            </div>,\r\n            <div\r\n                key={'bottom'}\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: window.innerWidth * 3 + 'px',\r\n                    height: '1px',\r\n                    marginBottom : '-1px',\r\n                    left: 0,\r\n                    bottom: 0,\r\n                    marginLeft: -window.innerWidth,\r\n                    pointerEvents: 'none',\r\n                    background: 'rgba(100,100,100,0.05)'\r\n                }}\r\n            >\r\n            </div>,\r\n            <div\r\n                key={'left'}\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: '1px',\r\n                    marginLeft: '-1px',\r\n                    height: window.innerHeight * 3,\r\n                    left: 0,\r\n                    top: 0,\r\n                    marginTop: -window.innerHeight,\r\n                    pointerEvents: 'none',\r\n                    background: 'rgba(100,100,100,0.05)'\r\n                }}\r\n            >\r\n            </div>\r\n        ]\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            flexDirection: 'column',\r\n            zIndex: 1,\r\n            display: this.props.nodeState.hidden ? 'none' : 'flex',\r\n            margin: '-1px',\r\n            border: '1px solid rgba(100,100,100,0.05)'\r\n        }\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout'];\r\n        if (this.props.nodeState.hidden) className.push('hidden');\r\n        if (this.props.nodeState.selected) className.push('selected');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={this.getClassName()}\r\n                ref={el => this.container = el}\r\n                style={this.getStyle()}\r\n            >\r\n                {this.getHeader()}\r\n                {this.getOverlay()}\r\n                <div\r\n                    className='layout-children'\r\n                    style={this.getChildrenStyle()}\r\n                >\r\n                    {this.getChildren()}\r\n                </div>\r\n                {this.getDrawLines()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\nimport { Layout } from './components/Layout/Layout';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 500, event);\n    };\n}\n\nexport interface AppProps {\n    data: NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    state = {\n        selected: false,\n        width : window.innerWidth,\n        height : window.innerHeight,\n    }\n\n    onNodeClick() {\n        this.setState({ selected: true });\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", debounce(() => {\n            this.setState({ width: window.innerWidth, height: window.innerHeight })\n        }));\n    }\n\n    render() {\n        const node = treemap(this.props.data, this.state.width, this.state.height);\n        node.data.label = \"Luis Jaggy\";\n\n        return (\n            <div\n                className=\"App\"\n                onClick={this.onNodeClick.bind(this)}\n                style={{\n                    height: '95%',\n                    width: '95%',\n                    position: 'absolute',\n                    marginLeft: '2.5%',\n                    // overflow: 'hidden'\n                }}\n            >\n                <Layout\n                    width={this.state.width}\n                    height={this.state.height}\n                    node={node}\n                    nodeState={{ selected: this.state.selected }}\n                    nodeDepth={0}\n                    nodeSiblings={[]}\n                    parent={null}\n                    parentState={null}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(<App data={data as NodeData}/>, document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}