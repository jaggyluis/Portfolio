{"version":3,"sources":["components/LayoutImage/LayoutImage.jsx","components/LayoutOverlay/LayoutOverlay.tsx","utils/treemap.ts","components/LayoutContent/LayoutContent.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LayoutImage","state","src","placeholder","this","props","srcImageLoader","Image","onload","setState","placeholderImageLoader","width","height","objectFit","position","filter","alt","style","getStyle","React","LayoutOverlay","hovered","hidden","selected","transitionDuration","event","stopPropagation","node","data","paths","split","Math","floor","random","backgroundSize","backgroundPosition","backgroundImage","getSplashImagePath","backgroundRepeat","transition","getTransitionDuration","willChange","background","opacity","bottom","right","left","transitionDelay","fontWeight","fontSize","nodeDepth","textTransform","mixBlendMode","top","margin","padding","overflow","display","parentState","className","onClick","bind","onMouseEnter","onMouseLeave","getSplashImagePlaceholderPath","getColorStyle","getLSliderStyle","getSliderColorStyle","getTSliderStyle","getLabelStyle","label","treemap","d3","tile","x0","y0","x1","y1","children","child","sum","d","undefined","weight","content","value","sort","a","b","LayoutContent","nodeState","getImagePath","getImagePlaceholderPath","borderBottom","color","maxWidth","map","txt","index","getContentStyle","key","v","overflowY","overflowX","getImage","getLabel","getContent","Layout","container","layout","type","id","window","innerWidth","innerHeight","selectedChildId","update","addEventListener","func","timer","clearTimeout","setTimeout","debounce","nodeData","Object","assign","flexDirection","zIndex","border","getChildTop","getChildLeft","getChildHeight","getChildWidth","getChildDisplay","getChildOpacity","isChildSelected","areNoChildrenSelected","parent","setChildSelected","flexWrap","paddingBottom","isSibling","h","paddingRight","getHeaderStyle","getHeaderNodeStyle","nodeSiblings","sibling","onChildClick","getChildStyle","getChildState","ref","el","getHeader","getChildrenStyle","getChildren","App","onNodeClick","marginLeft","Component","Boolean","location","hostname","match","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4QAEaA,G,MAAb,2MACIC,MAAQ,CAAEC,IAAK,KAAMC,YAAc,MADvC,mFAGyB,IAAD,SACaC,KAAKC,MAA1BH,EADQ,EACRA,IAAKC,EADG,EACHA,YAEPG,EAAiB,IAAIC,MAC3BD,EAAeJ,IAAMA,EACrBI,EAAeE,OAAS,WACpB,EAAKC,SAAS,CAAEP,SAGpB,IAAMQ,EAAyB,IAAIH,MACnCG,EAAuBR,IAAMC,EAC7BO,EAAuBF,OAAS,WAC5B,EAAKC,SAAS,CAAEN,mBAf5B,iCAoBQ,MAAO,CACHQ,MAAO,OACPC,OAAQ,OACRC,UAAW,QACXC,SAAU,WACVC,OAAQX,KAAKH,MAAME,cAAgBC,KAAKH,MAAMC,IAAM,YAAc,MAzB9E,+BA+BQ,OAAO,uBAAKA,IAAKE,KAAKH,MAAMC,KAAOE,KAAKC,MAAMF,YAAaa,IAAI,GAAGC,MAAOb,KAAKc,iBA/BtF,GAAiCC,cCEpBC,EAAb,2MAEInB,MAAQ,CACJoB,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,mBAAoB,KAN5B,4EASiBC,GACTrB,KAAKK,SAAS,CAAEY,SAAS,IACzBI,EAAMC,oBAXd,mCAciBD,GACTrB,KAAKK,SAAS,CAAEY,SAAS,IACzBI,EAAMC,oBAhBd,gCAoBQtB,KAAKK,SAAS,CAAEa,QAAQ,MApBhC,sDAwBQ,GAAIlB,KAAKC,MAAMsB,KAAKC,KAAK1B,IAAK,CAC1B,IAAM2B,EAAQzB,KAAKC,MAAMsB,KAAKC,KAAK1B,IAAI4B,MAAM,KAE7C,OADaD,EAAM,GAAK,MAAQA,EAAM,GAGtC,MAAO,KA7BnB,2CAkCQ,OAAOzB,KAAKC,MAAMsB,KAAKC,KAAK1B,KAAO,KAlC3C,uCAuCkB6B,KAAKC,MAAsB,GAAhBD,KAAKE,UAE1B,MAAO,CACHtB,MAAO,OACPC,OAAQ,OACRE,SAAU,WACVoB,eAAgB,QAChBC,mBAAoB,SACpBC,gBAAiB,QAAUhC,KAAKiC,qBAAuB,KACvDC,iBAAkB,YAGlBC,WAAY,EAAInC,KAAKoC,wBAA0B,KAC/CC,WAAY,aApDxB,sCAyDQ,MAAO,CACH9B,MAAO,OACPC,OAAQ,OACRE,SAAU,WACV4B,WAAY,wBACZC,QAASvC,KAAKH,MAAMoB,QAAU,EAAI,EAClCkB,WAAY,EAAInC,KAAKoC,wBAA0B,KAC/CC,WAAY,aAhExB,wCAqEQ,MAAO,CACH3B,SAAU,WACV8B,OAAQ,EACRC,MAAO,EACPjC,OAAQ,OAERD,MAAQP,KAAKH,MAAMoB,QAAkB,OAAR,MAC7BkB,WAAYnC,KAAKoC,wBAA0B,KAC3CC,WAAY,WA7ExB,wCAkFQ,MAAO,CACH3B,SAAU,WACV8B,OAAQ,EACRE,KAAM,EACNlC,OAASR,KAAKH,MAAMoB,QAAkB,OAAR,MAC9BV,MAAO,OACP4B,WAAYnC,KAAKoC,wBAA0B,KAC3CO,gBAAiB3C,KAAKoC,wBAA0B,KAChDC,WAAY,YA1FxB,4CA+FQ,MAAO,CACH3B,SAAU,WACVH,MAAO,OACPC,OAAQ,OACR8B,WAAY,wBACZC,QAASvC,KAAKH,MAAMoB,QAAU,EAAI,EAClCkB,WAAYnC,KAAKoC,wBAA0B,KAC3CO,gBAAiB3C,KAAKoC,wBAA0B,KAChDC,WAAY,aAvGxB,sCAgHQ,MAAO,CACH3B,SAAU,WACVkC,WAAY,SACZC,SALM,GADuB,GAAvB7C,KAAKC,MAAM6C,UAMH,KACdC,cAAe,YACfC,aAAc,UACdN,KAAM,EACNO,IAAK,KAvHjB,iCA8HkBtB,KAAKC,MAAsB,GAAhBD,KAAKE,UAE1B,MAAO,CACHtB,MAAO,mBACPC,OAAQ,mBAER0C,OAAQC,MACRC,SAAU,SACV1C,SAAU,WACV2C,QAASrD,KAAKH,MAAMqB,OAAS,OAAS,GACtCqB,QAAmC,MAA1BvC,KAAKC,MAAMqD,aAAuBtD,KAAKC,MAAMqD,YAAYnC,SAAW,EAAI,EACjFgB,WAAY,EAAInC,KAAKoC,wBAA0B,QAzI3D,8CA8IQ,OAAOpC,KAAKH,MAAMuB,qBA9I1B,+BAkJQ,OACI,uBACImC,UAAU,iBACVC,QAASxD,KAAKwD,QAAQC,KAAKzD,MAC3B0D,aAAc1D,KAAK0D,aAAaD,KAAKzD,MACrC2D,aAAc3D,KAAK2D,aAAaF,KAAKzD,MACrCa,MAAOb,KAAKc,YAEZ,gBAAC,EAAD,CAAahB,IAAKE,KAAKiC,qBAAsBlC,YAAaC,KAAK4D,kCAE/D,uBAAKL,UAAU,eAAe1C,MAAOb,KAAK6D,kBAC1C,uBAAKN,UAAU,iBAAiB1C,MAAOb,KAAK8D,mBACxC,uBAAKjD,MAAOb,KAAK+D,wBACjB,uBAAKR,UAAU,iBAAiB1C,MAAOb,KAAKgE,mBACxC,uBAAKnD,MAAOb,KAAK+D,wBACjB,uBACIR,UAAU,eACV1C,MAAOb,KAAKiE,iBAAkBjE,KAAKC,MAAMsB,KAAKC,KAAK0C,cAnK/E,GAAmCnD,a,OCAtBoD,EAAU,SAAC3C,EAAgBjB,EAAeC,GAmBnD,OAAO4D,MACFC,MAlBL,SAAc9C,EAAwC+C,EAAYC,EAAYC,EAAYC,GACtFL,IAAiB7C,EAAM,EAAG,EAAGhB,EAAOC,GAD8D,2BAIlG,aAAqBe,EAAKmD,UAAY,IAAtC,+CAA2C,CAAC,IAAjCC,EAAgC,QACvCA,EAAML,GAAKA,EAAKK,EAAML,GAAK/D,GAASiE,EAAKF,GACzCK,EAAMH,GAAKF,EAAKK,EAAMH,GAAKjE,GAASiE,EAAKF,GACzCK,EAAMJ,GAAKA,EAAKI,EAAMJ,GAAK/D,GAAUiE,EAAKF,GAC1CI,EAAMF,GAAKF,EAAKI,EAAMF,GAAKjE,GAAUiE,EAAKF,IARoD,qFAiB/FH,CAEFA,IAAa5C,GACToD,KAAI,SAAAC,GAAC,OARA,SAACrD,GACX,YAAuBsD,IAAhBtD,EAAKuD,OAAuBvD,EAAKuD,OAASvD,EAAKwD,QAAU,EAAI,EAOtDC,CAAMJ,MACfK,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEH,OAAS,IAAME,EAAEF,OAAS,QCtB5CI,EAAb,kMAGQ,GAAIrF,KAAKC,MAAMsB,KAAKC,KAAK1B,IAAK,CAC1B,IAAM2B,EAAQzB,KAAKC,MAAMsB,KAAKC,KAAK1B,IAAI4B,MAAM,KAE7C,OADaD,EAAM,GAAK,MAAQA,EAAM,GAGtC,MAAO,KARnB,qCAaQ,OAAOzB,KAAKC,MAAMsB,KAAKC,KAAK1B,KAAO,KAb3C,sCAiBQ,MAAO,CACHY,SAAU,WACVH,MAAO,OACPC,OAAQ,OACRsB,eAAiB9B,KAAKC,MAAMqF,UAAUnE,SAAW,UAAW,QAC5DY,mBAAoB,SACpBC,gBAAiB,QAAUhC,KAAKuF,eAAiB,KACjDrD,iBAAkB,eAxB9B,iCA6BQ,OACI,gBAAC,EAAD,CAAapC,IAAKE,KAAKuF,eAAgBxF,YAAaC,KAAKwF,8BA9BrE,wCAoCQ,MAAO,CAEHC,aAAe,mCAIfC,MAAQ,UACRC,SAAW,WA3CvB,mCA+CkB,IAAD,OACT,OAAO3F,KAAKC,MAAMsB,KAAKC,KAAKwD,QAAUhF,KAAKC,MAAMsB,KAAKC,KAAKwD,QAAQY,KAAI,SAACC,EAAKC,GACzE,OACI,uBACIvC,UAAU,cACV1C,MAAO,EAAKkF,kBACZC,IAAKF,GAEJD,MAGR,KA1Db,sCA8DQ,MAAO,CACH9C,cAAe,YACfH,WAAa,OACbC,SAAW,OACXnC,SAAU,SACVuC,IAAM,EACNyC,MAAQ,YACR1C,aAAe,cArE3B,iCA0EQ,OAAOhD,KAAKC,MAAMsB,KAAKC,KAAKwD,QACxB,uBACIzB,UAAU,eACV1C,MAAOb,KAAKiE,iBACdjE,KAAKC,MAAMsB,KAAKC,KAAK0C,YAEvBY,IAhFZ,iCAqFQ,IACMmB,EAAItE,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,IAE3C,MAAO,CACHtB,MAAO,mBACPC,OAAQ,mBACR8B,WAAY,QAAU2D,EAAI,IAAMA,EAAI,IAAMA,EAAI,QAC9C/C,OAASC,MACTzC,SAAU,WACVwF,UAAY,OACZC,UAAY,YA/FxB,+BAoGQ,OACI,uBACI5C,UAAU,iBACV1C,MAAOb,KAAKc,YAEXd,KAAKoG,WACLpG,KAAKqG,WACLrG,KAAKsG,kBA3GtB,GAAmCvF,aCwC5B,IAAMwF,EAAb,2MAEIC,UAAgC,KAFpC,EAGIC,OAAetC,EAAQ,CAAED,MAAO,IAAKwC,KAAM,MAAOC,GAAI,KAAO,IAAK,KAHtE,EAKI9G,MAAqB,CACjBU,MAAOqG,OAAOC,WACdrG,OAAQoG,OAAOE,YACfC,gBAAiB,KACjB3F,mBAAoB,KAT5B,oFAaQpB,KAAKgH,WAbb,4CAiBQhH,KAAKgH,WAjBb,0CAoByB,IAAD,OAChBJ,OAAOK,iBAAiB,SA3DhC,SAAkBC,GACd,IAAIC,EACJ,OAAO,SAAU9F,GACT8F,GAAOC,aAAaD,GACxBA,EAAQE,WAAWH,EAAM,IAAK7F,IAuDIiG,EAAS,WACnC,EAAKrH,MAAMqF,UAAUnE,UACrB,EAAKd,SAAS,CAAEE,MAAOqG,OAAOC,WAAYrG,OAAQoG,OAAOE,oBAvBzE,+BA4Bc,IAAD,OAEL,GAAI9G,KAAKC,MAAMqF,UAAUpE,OACrBlB,KAAKyG,OAAStC,EAAQ,CAAED,MAAO,IAAKwC,KAAM,MAAOC,GAAI,KAAO,IAAK,KACjE3G,KAAKH,MAAMkH,gBAAkB,SAC1B,CACH,IAAMQ,EAAWC,OAAOC,OAAO,GAAIzH,KAAKC,MAAMsB,KAAKC,MACnD+F,EAAS7C,SAAY6C,EAAS7C,SAAuB6C,EAAS7C,SAAS/D,QAAO,SAAAgE,GAAK,aAAI,YAAK1E,MAAMqD,mBAAX,eAAwBnC,YAAawD,EAAMK,gBAAzFF,EAEzC9E,KAAKyG,OAAStC,EAAQoD,EAAUvH,KAAKH,MAAMU,MAAOP,KAAKH,MAAMW,QAC7DR,KAAKH,MAAMkH,gBAAkB,QAtCzC,8CA2CQ,OAAO/G,KAAKH,MAAMuB,qBA3C1B,iCA+CQ,MAAO,CACHV,SAAU,WACVuC,IAAK,EACLP,KAAM,EACNlC,OAAQ,OACRD,MAAO,OACPmH,cAAe,SACfC,OAAQ,EACRtE,QAASrD,KAAKC,MAAMqF,UAAUpE,OAAS,OAAS,OAChDgC,OAAQ,OACR0E,OAAQ,sCAzDpB,oCA6DkBjD,GACV,MAAO,CACHjE,SAAU,WACVuC,IAAKjD,KAAK6H,YAAYlD,GACtBjC,KAAM1C,KAAK8H,aAAanD,GACxBnE,OAAQR,KAAK+H,eAAepD,GAC5BpE,MAAOP,KAAKgI,cAAcrD,GAC1BtB,QAASrD,KAAKiI,gBAAgBtD,GAC9BxC,WAAYnC,KAAKoC,wBAA0B,KAC3CG,QAASvC,KAAKkI,gBAAgBvD,GAC9BtC,WAAY,gDAvExB,kCA2EgBsC,GACR,OAAI3E,KAAKmI,gBAAgBxD,GAAe,EAChC,IAAMA,EAAMJ,GAAM,MA7ElC,mCAgFiBI,GACT,OAAI3E,KAAKmI,gBAAgBxD,GAAe,EAChC,IAAMA,EAAML,GAAM,MAlFlC,oCAqFkBK,GACV,OAAI3E,KAAKmI,gBAAgBxD,GAAe,OAChC,KAAOA,EAAMH,GAAKG,EAAML,IAAO,MAvF/C,qCA0FmBK,GACX,OAAI3E,KAAKmI,gBAAgBxD,GAAe,OAChC,KAAOA,EAAMF,GAAKE,EAAMJ,IAAO,MA5F/C,sCA+FoBI,GACZ,OAAO3E,KAAKmI,gBAAgBxD,IAAU3E,KAAKoI,wBAA0B,EAAI,IAhGjF,sCAmGoBzD,GACZ,OAAI3E,KAAKmI,gBAAgBxD,IAAU3E,KAAKoI,wBAAgC,UACjE,SArGf,oCAwGkBzD,GACV,MAAO,CACHxD,SAAUnB,KAAKmI,gBAAgBxD,GAC/BzD,OAA8B,OAAtBlB,KAAKC,MAAMoI,SAAoBrI,KAAKC,MAAMqF,UAAUnE,YA3GxE,sCA+GoBwD,GACZ,OAAO3E,KAAKH,MAAMkH,kBAAoBpC,EAAMnD,KAAKmF,KAhHzD,uCAmHqBhC,GACb3E,KAAKK,SAAS,CAAE0G,gBAAiBpC,EAAMnD,KAAKmF,OApHpD,8CAwHQ,OAAsC,OAA/B3G,KAAKH,MAAMkH,kBAxH1B,mCA2HiBpC,GACJA,EAAMnD,KAAKwD,SACZhF,KAAKsI,iBAAiB3D,KA7HlC,uCAkIQ,MAAO,CACHtB,QAASrD,KAAKC,MAAMqF,UAAUnE,SAAW,OAAS,OAClDoH,SAAU,OACVC,cAAe,UArI3B,2CAyIyE,IAAlDC,EAAiD,wDAE1D5D,EAA2B,GAAvB7E,KAAKC,MAAM6C,UACf4F,EAAI,GAAK7D,EAEf,MAAO,CACHnE,SAAU,WACVkC,WAAY6F,EAAY,UAAY,SACpCE,aAAc,OACd9F,SAAU6F,EAAI,KACd3F,cAAe,YACfC,aAAc,UACd0C,MAAO+C,EAAY,YAAc,QACjClG,QAASvC,KAAKC,MAAMqF,UAAUnE,SAAW,EAAI,KAtJzD,kCA0JiB,IAAD,OACR,OAAKnB,KAAKC,MAAMqD,aAAgBtD,KAAKC,MAAMqD,aACvCtD,KAAKC,MAAMqD,YAAYnC,UACO,QAA9BnB,KAAKC,MAAMsB,KAAKC,KAAKkF,KAEjB,uBAAKnD,UAAU,gBAAgB1C,MAAOb,KAAK4I,kBACvC,uBAAKrF,UAAU,qBAAqB1C,MAAOb,KAAK6I,sBAAuB7I,KAAKC,MAAMsB,KAAKC,KAAK0C,OAExFlE,KAAKH,MAAMU,MAAQ,SAAMuE,EACrB9E,KAAKC,MAAM6I,aAAalD,KAAI,SAAAmD,GACxB,OAAIA,EAAQvH,KAAKmF,KAAO,EAAK1G,MAAMsB,KAAKC,KAAKmF,GAErC,uBACIpD,UAAU,qBACVyC,IAAK+C,EAAQvH,KAAKmF,GAClB9F,MAAO,EAAKgI,oBAAmB,IAC9B,KAAOE,EAAQvH,KAAK0C,YAI7B,WAMrB,IApLf,yCAwLQ,MAAO,CACHxD,SAAU,WACVF,OAAQ,OACRD,MAAO,UA3LnB,oCA+LmB,IAAD,OACV,OAAOP,KAAKyG,OAAO/B,SAAW1E,KAAKyG,OAAO/B,SAASkB,KAAI,SAACjB,GACpD,OACI,uBACIqB,IAAKrB,EAAMnD,KAAKmF,GAChBpD,UAAU,eACVC,QAAS,WAAQ,EAAKwF,aAAarE,IACnC9D,MAAO,EAAKoI,cAActE,IAE1B,gBAAC4B,EAAD,CACI8B,OAAQ,EAAKpI,MAAMsB,KACnB+B,YAAa,EAAKrD,MAAMqF,UACxB/D,KAAMoD,EACNW,UAAW,EAAK4D,cAAcvE,GAC9B7B,UAAW,EAAK7C,MAAM6C,UAAY,EAClCgG,aAAc,EAAKrC,OAAO/B,UAAY,SAKhD,KAnNd,+BAsNc,IAAD,OACL,OACI,uBACInB,UAAU,SACV4F,IAAK,SAAAC,GAAE,OAAI,EAAK5C,UAAY4C,GAC5BvI,MAAOb,KAAKc,YAEXd,KAAKqJ,YACN,uBACI9F,UAAU,kBACV1C,MAAOb,KAAKsJ,oBAEXtJ,KAAKuJ,cAE4B,QAA9BvJ,KAAKC,MAAMsB,KAAKC,KAAKkF,KACjB,gBAAC,EAAD,CACInF,KAAMvB,KAAKC,MAAMsB,KACjB+D,UAAWtF,KAAKC,MAAMqF,UACtBxC,UAAW9C,KAAKC,MAAM6C,UACtBgG,aAAc9I,KAAKC,MAAM6I,aACzBT,OAAQrI,KAAKC,MAAMoI,OACnB/E,YAAatD,KAAKC,MAAMqD,cAG5B,gBAAC,EAAD,CACI/B,KAAMvB,KAAKC,MAAMsB,KACjB+D,UAAWtF,KAAKC,MAAMqF,UACtBxC,UAAW9C,KAAKC,MAAM6C,UACtBgG,aAAc9I,KAAKC,MAAM6I,aACzBT,OAAQrI,KAAKC,MAAMoI,OACnB/E,YAAatD,KAAKC,MAAMqD,eAMxC,uBACIzC,MAAO,CACHH,SAAU,QACVH,MAA4B,EAApBqG,OAAOC,WAAiB,KAChCrG,OAAS,MACTkC,KAAM,EACNJ,WAAa,2BAIrB,uBACIzB,MAAO,CACHH,SAAU,QACVH,MAA4B,EAApBqG,OAAOC,WAAiB,KAChCrG,OAAS,MACTkC,KAAM,EACNF,OAAS,KACTF,WAAa,gCA3QrC,GAA4BvB,a,ICabyI,E,2MAvCX3J,MAAM,CACFsB,UAAW,G,6EAIXnB,KAAKK,SAAS,CAACc,UAAW,M,+BAK1B,IAAMI,EAAO4C,EAAQnE,KAAKC,MAAMuB,KAAMoF,OAAOC,WAAYD,OAAOE,aAGhE,OAFAvF,EAAKC,KAAK0C,MAAQ,aAGd,yBACIX,UAAU,MACVC,QAASxD,KAAKyJ,YAAYhG,KAAKzD,MAC/Ba,MAAO,CACHL,OAAQ,MACRD,MAAO,MACPG,SAAU,WACVgJ,WAAa,SAIjB,kBAAC,EAAD,CACInI,KAAMA,EACN+D,UAAW,CAACnE,SAAWnB,KAAKH,MAAMsB,UAClC2B,UAAW,EACXgG,aAAc,GACdT,OAAQ,KACR/E,YAAa,Y,GAjCfvC,IAAM4I,WCLJC,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DCRN3F,IAFa,aAEC4F,MAAM,SAAAxI,GACZA,GAAMyI,IAASC,OAAO,kBAAC,EAAD,CAAK1I,KAAMA,IAAqB2I,SAASC,eAAe,YDgIhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMP,MAAK,SAAAQ,GACjCA,EAAaC,kB","file":"static/js/main.4ee110f2.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nexport class LayoutImage extends React.Component {\r\n    state = { src: null, placeholder : null };\r\n\r\n    componentDidMount() {\r\n        const { src, placeholder } = this.props;\r\n\r\n        const srcImageLoader = new Image();\r\n        srcImageLoader.src = src;\r\n        srcImageLoader.onload = () => {\r\n            this.setState({ src });\r\n        };\r\n\r\n        const placeholderImageLoader = new Image();\r\n        placeholderImageLoader.src = placeholder;\r\n        placeholderImageLoader.onload = () => {\r\n            this.setState({ placeholder });\r\n        };\r\n    }\r\n\r\n    getStyle() {\r\n        return { \r\n            width: '100%', \r\n            height: '100%', \r\n            objectFit: 'cover', \r\n            position: 'absolute',\r\n            filter: this.state.placeholder && !this.state.src ? 'blur(5px)' : ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state.src, this.state.placeholder)\r\n        return <img src={this.state.src || this.props.placeholder} alt='' style={this.getStyle()}/>;\r\n\r\n        // const url = this.state.src ? this.state.src : this.state.placeholder ? this.state.placeholder : ''\r\n\r\n        // return <div style={{\r\n        //     position: 'absolute',\r\n        //     width: '100%',\r\n        //     height: '100%',\r\n        //     backgroundSize:  'cover',\r\n        //     backgroundPosition: 'center',\r\n        //     backgroundImage: 'url(\"' + url + '\")',\r\n        //     backgroundRepeat: 'no-repeat',\r\n        // }}></div>\r\n    }\r\n}","import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    state = {\r\n        hovered: false,\r\n        hidden: false,\r\n        selected: false,\r\n        transitionDuration: 300\r\n    }\r\n\r\n    onMouseEnter(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: true });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onMouseLeave(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: false });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onClick() {\r\n        this.setState({ hidden: true });\r\n    }\r\n\r\n    getSplashImagePlaceholderPath(): string {\r\n        if (this.props.node.data.src) {\r\n            const paths = this.props.node.data.src.split(\".\");\r\n            const path = paths[0] + \"_s.\" + paths[1];\r\n            return path;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getSplashImagePath(): string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getSplashStyle(): React.CSSProperties {\r\n\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: 'url(\"' + this.getSplashImagePath() + '\")',\r\n            backgroundRepeat: 'no-repeat',\r\n            // opacity: this.state.hovered ? 0 : 1,\r\n            // filter:  'blur(5px)', //'grayscale(50%)',\r\n            transition: 2 * this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getColorStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            background: 'rgba(255,255,255,0.2)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: 2 * this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getLSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            right: 0,\r\n            height: '100%',\r\n            // display: this.props.parentState == null || this.props.parentState.selected ? '' : 'none',\r\n            width: !this.state.hovered ? '80%' : '100%',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            willChange: 'width'\r\n        }\r\n    }\r\n\r\n    getTSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n            height: !this.state.hovered ? '70%' : '100%',\r\n            width: '100%',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms',\r\n            willChange: 'height'\r\n        }\r\n    }\r\n\r\n    getSliderColorStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            background: 'rgba(255,255,255,0.5)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n\r\n        const d = this.props.nodeDepth * 10\r\n        const h = 40 - d;\r\n\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: 'bolder',\r\n            fontSize: h + 'px',\r\n            textTransform: 'uppercase',\r\n            mixBlendMode: 'overlay',\r\n            left: 0,\r\n            top: 0,\r\n        }\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        const padding = 0;\r\n        const v = Math.floor(Math.random() * 30) + 225;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2 * padding) + 'px)',\r\n            height: 'calc(100% - ' + (2 * padding) + 'px)',\r\n            // background: 'rgba(' + v + ',' + v + ',' + v + ',' + 1 + ')',\r\n            margin: padding + 'px',\r\n            overflow: 'hidden',\r\n            position: 'absolute',\r\n            display: this.state.hidden ? 'none' : '',\r\n            opacity: this.props.parentState == null || this.props.parentState.selected ? 1 : 0,\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout-overlay'\r\n                onClick={this.onClick.bind(this)}\r\n                onMouseEnter={this.onMouseEnter.bind(this)}\r\n                onMouseLeave={this.onMouseLeave.bind(this)}\r\n                style={this.getStyle()}\r\n            >\r\n                <LayoutImage src={this.getSplashImagePath()} placeholder={this.getSplashImagePlaceholderPath()}/>\r\n                {/* <div className='layout-splash' style={this.getSplashStyle()}></div> */}\r\n                <div className='layout-color' style={this.getColorStyle()}></div>\r\n                <div className='layout-lslider' style={this.getLSliderStyle()}>\r\n                    <div style={this.getSliderColorStyle()}></div>\r\n                    <div className='layout-tslider' style={this.getTSliderStyle()}>\r\n                        <div style={this.getSliderColorStyle()}></div>\r\n                        <div\r\n                            className='layout-label'\r\n                            style={this.getLabelStyle()}>{this.props.node.data.label}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        d3.treemapBinary(node, 0, 0, width, height);\r\n        // d3.treemapResquarify(node, 0, 0, width, height);\r\n        // d3.treemapSquarify(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (data: NodeData) => {\r\n        return data.weight !== undefined ? data.weight : data.content ? 2 : 1; // 1;\r\n        // return data.weight !== undefined ? data.weight : data.type === 'data' ? data.content ? 2 : 1 : 1;\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (b.value || 0) - (a.value || 0))) as Node;\r\n}","import * as React from 'react';\r\nimport { LayoutProps } from '../Layout/Layout';\r\nimport { color } from 'd3';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\n\r\nexport class LayoutContent extends React.Component<LayoutProps> {\r\n    \r\n    getImagePlaceholderPath()  : string {\r\n        if (this.props.node.data.src) {\r\n            const paths = this.props.node.data.src.split(\".\");\r\n            const path = paths[0] + \"_s.\" + paths[1];\r\n            return path;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getImagePath() : string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getImageStyle() : React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundSize:  this.props.nodeState.selected ? 'contain' :'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: 'url(\"' + this.getImagePath() + '\")',\r\n            backgroundRepeat: 'no-repeat',\r\n        }\r\n    }\r\n\r\n    getImage() {\r\n        return (\r\n            <LayoutImage src={this.getImagePath()} placeholder={this.getImagePlaceholderPath()}/>\r\n            // <div className='layout-content-image' style={this.getImageStyle()}></div>\r\n        )\r\n    }\r\n\r\n    getContentStyle() : React.CSSProperties {\r\n        return {\r\n            // margin: \"32px 10% 0 0\",\r\n            borderBottom : '1px solid rgba(100,100,100,0.05)',\r\n            // paddingBottom : '10px',\r\n            // textAlign: 'right',\r\n            // paddingRight: '10px',\r\n            color : 'dimgrey',\r\n            maxWidth : '500px'\r\n        }\r\n    }\r\n\r\n    getContent() {\r\n        return this.props.node.data.content ? this.props.node.data.content.map((txt, index) => {\r\n            return (\r\n                <div \r\n                    className='layout-text'\r\n                    style={this.getContentStyle()}\r\n                    key={index}\r\n                    >\r\n                    {txt}\r\n                </div>\r\n            )\r\n        }) : [];\r\n    }\r\n\r\n    getLabelStyle() : React.CSSProperties {\r\n        return {\r\n            textTransform: 'uppercase',\r\n            fontWeight : 'bold',\r\n            fontSize : '40px',\r\n            position: 'sticky',\r\n            top : 0,\r\n            color : 'lightgrey',\r\n            mixBlendMode : 'multiply'\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        return this.props.node.data.content ? (\r\n            <div\r\n                className='layout-label'\r\n                style={this.getLabelStyle()}\r\n            >{this.props.node.data.label}\r\n            </div>\r\n        ) : undefined;\r\n    }\r\n\r\n    getStyle() : React.CSSProperties {\r\n\r\n        const padding = 0;\r\n        const v = Math.floor(Math.random() * 50) + 200;\r\n\r\n        return {\r\n            width: 'calc(100% - ' + (2*padding) + 'px)',\r\n            height: 'calc(100% - ' + (2*padding) + 'px)',\r\n            background: 'rgba(' + v + ',' + v + ',' + v + ',' + 0.2 + ')',\r\n            margin : padding + 'px' ,\r\n            position: 'absolute',\r\n            overflowY : 'auto',\r\n            overflowX : 'hidden'\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div   \r\n                className='layout-content'\r\n                style={this.getStyle()}\r\n            >   \r\n                {this.getImage()}\r\n                {this.getLabel()}\r\n                {this.getContent()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from './../../model/Node';\r\nimport { treemap } from './../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\n\r\nfunction debounce(func: any) {\r\n    var timer: any;\r\n    return function (event: any) {\r\n        if (timer) clearTimeout(timer);\r\n        timer = setTimeout(func, 500, event);\r\n    };\r\n}\r\n\r\n/**\r\n * Shuffles array in place.\r\n * @param {Array} a items An array containing the items.\r\n */\r\nfunction shuffle(a: any) {\r\n    var j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n}\r\n\r\nexport interface LayoutProps {\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    nodeDepth: number;\r\n    nodeSiblings: Node[];\r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onChildClick?: (child: Node) => void;\r\n}\r\nexport interface LayoutState {\r\n    selectedChildId: string | null;\r\n    transitionDuration: number;\r\n    width: number;\r\n    height: number;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap({ label: '_', type: 'dir', id: '_' }, 100, 100);\r\n\r\n    state: LayoutState = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        selectedChildId: null,\r\n        transitionDuration: 600\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        this.update();\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", debounce(() => {\r\n            if (this.props.nodeState.selected) {\r\n                this.setState({ width: window.innerWidth, height: window.innerHeight })\r\n            }\r\n        }));\r\n    }\r\n\r\n    update() {\r\n\r\n        if (this.props.nodeState.hidden) {\r\n            this.layout = treemap({ label: '_', type: 'dir', id: '_' }, 100, 100);\r\n            this.state.selectedChildId = null;\r\n        } else {\r\n            const nodeData = Object.assign({}, this.props.node.data);\r\n            nodeData.children = !nodeData.children ? undefined : nodeData.children.filter(child => this.props.parentState?.selected || !child.content)\r\n\r\n            this.layout = treemap(nodeData, this.state.width, this.state.height);\r\n            this.state.selectedChildId = null;\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            flexDirection: 'column',\r\n            zIndex: 1,\r\n            display: this.props.nodeState.hidden ? 'none' : 'flex',\r\n            margin: '-1px',\r\n            border: '1px solid rgba(100,100,100,0.05)'\r\n        }\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            display: this.getChildDisplay(child),\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            opacity: this.getChildOpacity(child),\r\n            willChange: 'top, left, height, width, display, opacity'\r\n        }\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return 0;\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.x1 - child.x0)) + \"%\";\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        return (100 * (child.y1 - child.y0)) + \"%\";\r\n    }\r\n\r\n    getChildOpacity(child: Node) {\r\n        return this.isChildSelected(child) || this.areNoChildrenSelected() ? 1 : 0;\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return 'visible';\r\n        return 'none';\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildSelected(child),\r\n            hidden: this.props.parent !== null && !this.props.nodeState.selected\r\n        }\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.state.selectedChildId === child.data.id;\r\n    }\r\n\r\n    setChildSelected(child: Node) {\r\n        this.setState({ selectedChildId: child.data.id })\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChildId === null;\r\n    }\r\n\r\n    onChildClick(child: Node) {\r\n        if (!child.data.content) {\r\n            this.setChildSelected(child);\r\n        }\r\n    }\r\n\r\n    getHeaderStyle(): React.CSSProperties {\r\n        return {\r\n            display: this.props.nodeState.selected ? 'flex' : 'none',\r\n            flexWrap: 'wrap',\r\n            paddingBottom: '10px',\r\n        }\r\n    }\r\n\r\n    getHeaderNodeStyle(isSibling: boolean = false): React.CSSProperties {\r\n\r\n        const d = this.props.nodeDepth * 10\r\n        const h = 40 - d;\r\n\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: isSibling ? 'lighter' : 'bolder',\r\n            paddingRight: '10px',\r\n            fontSize: h + 'px',\r\n            textTransform: 'uppercase',\r\n            mixBlendMode: 'overlay',\r\n            color: isSibling ? 'lightgrey' : 'black',\r\n            opacity: this.props.nodeState.selected ? 1 : 0,\r\n        }\r\n    }\r\n\r\n    getHeader() {\r\n        if (!this.props.parentState || (this.props.parentState &&\r\n            this.props.parentState.selected &&\r\n            this.props.node.data.type === 'dir')) {\r\n            return (\r\n                <div className='layout-header' style={this.getHeaderStyle()}>\r\n                    <div className='layout-header-node' style={this.getHeaderNodeStyle()}>{this.props.node.data.label}</div>\r\n                    {\r\n                        this.state.width < 600 ? undefined :\r\n                            this.props.nodeSiblings.map(sibling => {\r\n                                if (sibling.data.id !== this.props.node.data.id) {\r\n                                    return (\r\n                                        <div\r\n                                            className='layout-header-node'\r\n                                            key={sibling.data.id}\r\n                                            style={this.getHeaderNodeStyle(true)}>\r\n                                            {\"/ \" + sibling.data.label}\r\n                                        </div>\r\n                                    )\r\n                                } else {\r\n                                    return undefined\r\n                                }\r\n                            })\r\n                    }\r\n                </div>\r\n            )\r\n        } else return undefined;\r\n    }\r\n\r\n    getChildrenStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            height: '100%',\r\n            width: '100%',\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        return this.layout.children ? this.layout.children.map((child) => {\r\n            return (\r\n                <div\r\n                    key={child.data.id}\r\n                    className='layout-child'\r\n                    onClick={() => { this.onChildClick(child); }}\r\n                    style={this.getChildStyle(child)}\r\n                >\r\n                    <Layout\r\n                        parent={this.props.node}\r\n                        parentState={this.props.nodeState}\r\n                        node={child}\r\n                        nodeState={this.getChildState(child)}\r\n                        nodeDepth={this.props.nodeDepth + 1}\r\n                        nodeSiblings={this.layout.children || []}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n            : [];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout'\r\n                ref={el => this.container = el}\r\n                style={this.getStyle()}\r\n            >\r\n                {this.getHeader()}\r\n                <div\r\n                    className='layout-children'\r\n                    style={this.getChildrenStyle()}\r\n                >\r\n                    {this.getChildren()}\r\n                    {\r\n                        this.props.node.data.type === 'dir' ?\r\n                            <LayoutOverlay\r\n                                node={this.props.node}\r\n                                nodeState={this.props.nodeState}\r\n                                nodeDepth={this.props.nodeDepth}\r\n                                nodeSiblings={this.props.nodeSiblings}\r\n                                parent={this.props.parent}\r\n                                parentState={this.props.parentState}\r\n                            />\r\n                            :\r\n                            <LayoutContent\r\n                                node={this.props.node}\r\n                                nodeState={this.props.nodeState}\r\n                                nodeDepth={this.props.nodeDepth}\r\n                                nodeSiblings={this.props.nodeSiblings}\r\n                                parent={this.props.parent}\r\n                                parentState={this.props.parentState}\r\n                            />\r\n                    }\r\n\r\n\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        position: 'fixed',\r\n                        width : window.innerWidth * 2 + 'px',\r\n                        height : '1px',\r\n                        left: 0,\r\n                        background : 'rgba(100,100,100,0.1)'\r\n                    }}\r\n                >\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        position: 'fixed',\r\n                        width : window.innerWidth * 2 + 'px',\r\n                        height : '1px',\r\n                        left: 0,\r\n                        bottom : '5%',\r\n                        background : 'rgba(100,100,100,0.1)'\r\n                    }}\r\n                >\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout/Layout';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 500, event);\n    };\n}\n\nexport interface AppProps {\n    data : NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    state={\n        selected : false,\n    }\n\n    onNodeClick() {\n        this.setState({selected : true});\n    }\n\n    render() {\n\n        const node = treemap(this.props.data, window.innerWidth, window.innerHeight);\n        node.data.label = \"Luis Jaggy\";\n\n        return (\n            <div\n                className=\"App\"\n                onClick={this.onNodeClick.bind(this)}\n                style={{\n                    height: '95%',\n                    width: '95%',\n                    position: 'absolute',\n                    marginLeft : '2.5%',\n                    // overflow: 'hidden'\n                }}\n            >\n                <Layout\n                    node={node}\n                    nodeState={{selected : this.state.selected }}\n                    nodeDepth={0}\n                    nodeSiblings={[]}\n                    parent={null}\n                    parentState={null}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(<App data={data as NodeData}/>, document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}