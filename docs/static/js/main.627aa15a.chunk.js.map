{"version":3,"sources":["utils/treemap.ts","components/LayoutImage/LayoutImage.jsx","components/LayoutOverlay/LayoutOverlay.tsx","components/LayoutContent/LayoutContent.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["treemap","data","width","height","d3","tile","node","x0","y0","x1","y1","children","child","sum","d","undefined","weight","content","value","sort","a","b","LayoutImage","state","src","placeholder","path","paths","split","this","props","window","innerWidth","getMobilePath","srcImageLoader","Image","onload","setState","objectFit","contain","position","getPlaceholderPath","alt","style","getStyle","React","LayoutOverlay","hovered","transitionDuration","event","stopPropagation","opacity","transition","getTransitionDuration","willChange","background","bottom","right","borderLeft","transform","WebkitTransform","left","marginLeft","paddingLeft","borderTop","transitionDelay","s","c","Math","ceil","fontWeight","fontSize","nodeDepth","lineHeight","textTransform","borderBottom","wordBreak","backgroundClip","WebkitBackgroundClip","WebkitTextFillColor","color","top","overflow","zIndex","display","nodeState","selected","parentState","className","onMouseEnter","bind","onMouseLeave","getSplashImagePath","getColorStyle","getLSliderStyle","getSliderColorStyle","getTSliderStyle","getLabelStyle","label","LayoutContent","getImagePath","maxWidth","map","txt","index","getContentStyle","key","mixBlendMode","overflowY","overflowX","getImage","getLabel","getContent","Layout","container","layout","selectedChildId","visibleChildId","update","isChildVisible","hidden","parent","id","setSelectedChild","clearSelectedChildren","flexWrap","marginBottom","isSibling","h","paddingRight","type","getHeaderStyle","onClick","getHeaderNodeStyle","nodeSiblings","sibling","e","onNodeClick","isChildSelected","areNoChildrenSelected","getChildTop","getChildLeft","getChildHeight","getChildWidth","getChildOpacity","getChildStyle","getChildState","onChildClick","marginTop","pointerEvents","innerHeight","flexDirection","margin","border","push","join","getClassName","ref","el","getHeader","getOverlay","getChildrenStyle","getChildren","getDrawLines","App","addEventListener","func","timer","clearTimeout","setTimeout","debounce","Component","Boolean","location","hostname","match","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.627aa15a.chunk.js","sourcesContent":["import { NodeData } from \"../model/NodeData\";\r\nimport { Node } from '../model/Node';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const treemap = (data: NodeData, width: number, height: number): Node => {\r\n\r\n    function tile(node: d3.HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number) {\r\n        d3.treemapBinary(node, 0, 0, width, height);\r\n        // d3.treemapResquarify(node, 0, 0, width, height);\r\n        // d3.treemapSquarify(node, 0, 0, width, height);\r\n        for (const child of (node.children || [])) {\r\n            child.x0 = x0 + child.x0 / width * (x1 - x0);\r\n            child.x1 = x0 + child.x1 / width * (x1 - x0);\r\n            child.y0 = y0 + child.y0 / height * (y1 - y0);\r\n            child.y1 = y0 + child.y1 / height * (y1 - y0);\r\n        }\r\n    }\r\n\r\n    const value = (data: NodeData) => {\r\n        return data.weight !== undefined ? data.weight : data.content ? 3 : 1; // 1;\r\n        // return data.weight !== undefined ? data.weight : data.type === 'data' ? data.content ? 2 : 1 : 1;\r\n    }\r\n\r\n    return d3.treemap()\r\n        .tile(tile)\r\n        (d3.hierarchy(data)\r\n            .sum(d => value(d))\r\n            .sort((a, b) => (b.value || 0) - (a.value || 0))) as Node;\r\n}","import * as React from 'react'\r\n\r\nexport class LayoutImage extends React.Component {\r\n\r\n    state = { src: null, placeholder: null };\r\n\r\n    getPlaceholderPath(path) {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_s.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getMobilePath(path) {\r\n        if (path) {\r\n            const paths = path.split(\".\");\r\n            const placeholder = paths[0] + \"_m.\" + paths[1];\r\n            return placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { src } = this.props;\r\n\r\n        if (window.innerWidth < 600) src = this.getMobilePath(src);\r\n        // src = this.getPlaceholderPath(src);\r\n\r\n        const srcImageLoader = new Image();\r\n        srcImageLoader.src = src;\r\n        srcImageLoader.onload = () => {\r\n            this.setState({ src });\r\n        };\r\n    }\r\n\r\n    getStyle() {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            objectFit: this.props.contain ? 'contain' : 'cover',\r\n            position: 'absolute',\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // return <div></div>\r\n        // console.log(this.state.src, this.state.placeholder)\r\n        return (\r\n            <img\r\n                src={this.state.src || this.getPlaceholderPath(this.props.src)}\r\n                alt=''\r\n                style={this.getStyle()}\r\n            />\r\n        )\r\n\r\n        // const url = this.state.src ? this.state.src : this.state.placeholder ? this.state.placeholder : ''\r\n\r\n        // return <div style={{\r\n        //     position: 'absolute',\r\n        //     width: '100%',\r\n        //     height: '100%',\r\n        //     backgroundSize:  'cover',\r\n        //     backgroundPosition: 'center',\r\n        //     backgroundImage: 'url(\"' + url + '\")',\r\n        //     backgroundRepeat: 'no-repeat',\r\n        // }}></div>\r\n    }\r\n}","import * as React from 'react';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutOverlay extends React.Component<LayoutProps> {\r\n\r\n    state = {\r\n        hovered: false,\r\n        transitionDuration: 300\r\n    }\r\n\r\n    onMouseEnter(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: true });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onMouseLeave(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        this.setState({ hovered: false });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    getSplashImagePath(): string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getSplashStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            opacity : this.state.hovered ? 0 : 1,\r\n            transition: 2 * this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getColorStyle(): React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n             background: 'rgba(255,255,255,0.2)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: 2 * this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getLSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            right: 0,\r\n            height: '100%',\r\n            width : '100%',\r\n            borderLeft : '1px solid rgba(100,100,100,0.1)',\r\n            transform : !this.state.hovered ? 'translate(20%, 0)' : '',\r\n            WebkitTransform: !this.state.hovered ? 'translate(20%, 0)' : '',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            willChange: 'transform'\r\n        }\r\n    }\r\n\r\n    getTSliderStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n            height : '100%',\r\n            width: '100%',\r\n            marginLeft : '-25%',\r\n            paddingLeft : '25%',\r\n            borderTop : '1px solid rgba(100,100,100,0.1)',\r\n            transform : !this.state.hovered ? 'translate(0, 30%)' : '',\r\n            WebkitTransform : !this.state.hovered ? 'translate(0, 30%)' : '',\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms',\r\n            willChange : 'transform'\r\n        }\r\n    }\r\n\r\n    getSliderColorStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            // background: 'rgba(255,255,255,0.5)',\r\n            background: 'repeating-linear-gradient(-45deg,transparent,transparent 1px,rgba(100,100,100,0.1) 1px, rgba(100,100,100,0.1) 2px)',\r\n            opacity: this.state.hovered ? 0 : 1,\r\n            transition: this.getTransitionDuration() + 'ms',\r\n            transitionDelay: this.getTransitionDuration() + 'ms',\r\n            willChange: 'opacity'\r\n        }\r\n    }\r\n\r\n    getLabelStyle(): React.CSSProperties {\r\n\r\n        const s = this.props.width < 600 ? 30 : 40;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: 'bolder',\r\n            fontSize: h + 'px',\r\n            lineHeight: 0.8,\r\n            textTransform: 'uppercase',\r\n            borderBottom : '1px solid rgba(100,100,100,0.1)',\r\n            // mixBlendMode: 'overlay',\r\n            wordBreak: 'break-all',\r\n            background: 'repeating-linear-gradient(45deg,transparent,transparent 1px,rgba(100,100,100,0.2) 1px, rgba(100,100,100,0.2) 2px)',\r\n            backgroundClip: 'text',\r\n            WebkitBackgroundClip: 'text',\r\n            WebkitTextFillColor: 'transparent',\r\n            color: 'white',\r\n            left: 0,\r\n            top: 0,\r\n        }\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n            position: 'absolute',\r\n            zIndex: 2,\r\n            display: this.props.nodeState.selected ? 'none' : '',\r\n            opacity: this.props.parentState == null || this.props.parentState.selected ? 1 : 0,\r\n            transition: 2 * this.getTransitionDuration() + 'ms'\r\n        }\r\n    }\r\n\r\n    getTransitionDuration() {\r\n        return this.state.transitionDuration;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='layout-overlay'\r\n                onMouseEnter={this.onMouseEnter.bind(this)}\r\n                onMouseLeave={this.onMouseLeave.bind(this)}\r\n                style={this.getStyle()}\r\n            >\r\n                <LayoutImage src={this.getSplashImagePath()} />\r\n                <div className='layout-color' style={this.getColorStyle()}></div>\r\n                <div className='layout-lslider' style={this.getLSliderStyle()}>\r\n                    <div style={this.getSliderColorStyle()}></div>\r\n                    <div className='layout-tslider' style={this.getTSliderStyle()}>\r\n                        <div style={this.getSliderColorStyle()}></div>\r\n                        <div\r\n                            className='layout-label'\r\n                            style={this.getLabelStyle()}>{this.props.node.data.label}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { color } from 'd3';\r\nimport { LayoutImage } from '../LayoutImage/LayoutImage';\r\nimport { LayoutProps } from '../Layout/Layout';\r\n\r\nexport class LayoutContent extends React.Component<LayoutProps> {\r\n    \r\n    getImagePath() : string {\r\n        return this.props.node.data.src || '';\r\n    }\r\n\r\n    getImage() {\r\n        return (\r\n            <LayoutImage \r\n                src={this.getImagePath()} \r\n                contain={this.props.nodeState.selected}\r\n            />\r\n        )\r\n    }\r\n\r\n    getContentStyle() : React.CSSProperties {\r\n        return {\r\n            borderBottom : '1px solid rgba(100,100,100,0.1)',\r\n            color : 'dimgrey',\r\n            maxWidth : '500px',\r\n        }\r\n    }\r\n\r\n    getContent() {\r\n        return this.props.node.data.content ? this.props.node.data.content.map((txt, index) => {\r\n            return (\r\n                <div \r\n                    className='layout-text'\r\n                    style={this.getContentStyle()}\r\n                    key={index}\r\n                    >\r\n                    {txt}\r\n                </div>\r\n            )\r\n        }) : [];\r\n    }\r\n\r\n    getLabelStyle() : React.CSSProperties {\r\n        return {\r\n            textTransform: 'uppercase',\r\n            fontWeight : 'bold',\r\n            fontSize : '40px',\r\n            lineHeight: 0.8,\r\n            position: 'sticky',\r\n            top : 0,\r\n            color : 'lightgrey',\r\n            mixBlendMode : 'multiply'\r\n        }\r\n    }\r\n\r\n    getLabel() {\r\n        return this.props.node.data.content ? (\r\n            <div\r\n                className='layout-label'\r\n                style={this.getLabelStyle()}\r\n            >{this.props.node.data.label}\r\n            </div>\r\n        ) : undefined;\r\n    }\r\n\r\n    getStyle() : React.CSSProperties {\r\n        return {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            overflowY : 'auto',\r\n            overflowX : 'hidden',\r\n            zIndex : 1\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div   \r\n                className='layout-content'\r\n                style={this.getStyle()}\r\n            >   \r\n                {this.getImage()}\r\n                {this.getLabel()}\r\n                {this.getContent()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { NodeData, NodeState } from '../../model/NodeData';\r\nimport { LayoutOverlay } from '../LayoutOverlay/LayoutOverlay';\r\nimport { Node } from '../../model/Node';\r\nimport { treemap } from '../../utils/treemap';\r\nimport { LayoutContent } from '../LayoutContent/LayoutContent';\r\nimport './Layout.css';\r\n\r\nexport interface LayoutProps {\r\n    width: number,\r\n    height: number,\r\n    node: Node;\r\n    nodeState: NodeState;\r\n    nodeDepth: number;\r\n    nodeSiblings: Node[];  \r\n    parent: Node | null;\r\n    parentState: NodeState | null;\r\n    onNodeClick?: (node : Node) => void;\r\n}\r\nexport interface LayoutState {\r\n    selectedChildId: string | null;\r\n    visibleChildId : string | null;\r\n    transitionDuration: number;\r\n}\r\nexport class Layout extends React.Component<LayoutProps> {\r\n\r\n    container: HTMLElement | null = null;\r\n    layout: Node = treemap(this.props.node.data, this.props.width, this.props.height);\r\n\r\n    state: LayoutState = {\r\n        selectedChildId: null,\r\n        visibleChildId : null,\r\n        transitionDuration: 300\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        this.layout = treemap(this.props.node.data, this.props.width, this.props.height);\r\n        if (!this.props.nodeState.selected) {\r\n            this.state.selectedChildId = null;\r\n            this.state.visibleChildId = null;\r\n        }\r\n    }\r\n\r\n    getChildState(child: Node): NodeState {\r\n        return {\r\n            selected: this.isChildVisible(child), //this.isChildSelected(child),\r\n            hidden: this.props.parent !== null && !this.props.nodeState.selected\r\n        }\r\n    }\r\n\r\n    isChildVisible(child : Node) {\r\n        return this.state.visibleChildId === child.data.id;\r\n    }\r\n\r\n    isChildSelected(child: Node) {\r\n        return this.state.selectedChildId === child.data.id;\r\n    }\r\n\r\n    areNoChildrenSelected() {\r\n        return this.state.selectedChildId === null;\r\n    }\r\n\r\n    setSelectedChild(child: Node) {\r\n        this.setState({ selectedChildId: child.data.id, visibleChildId: child.data.id })\r\n        // this.setState({ selectedChildId: child.data.id })\r\n        // setTimeout(() => {\r\n        //     this.setState({visibleChildId : child.data.id});\r\n        // }, this.state.transitionDuration * 2)\r\n    }\r\n\r\n    clearSelectedChildren() {\r\n        this.setState({selectedChildId : null, visibleChildId : null});\r\n    }\r\n\r\n    onChildClick(child: Node | null) {\r\n        if (!child) {\r\n            this.clearSelectedChildren()\r\n        } else {\r\n            if (!child.data.content) {\r\n                this.setSelectedChild(child);\r\n            } \r\n        }\r\n    }\r\n\r\n    getHeaderStyle(): React.CSSProperties {\r\n        return {\r\n            display: this.props.nodeState.selected ? 'flex' : 'none',\r\n            flexWrap: 'wrap',\r\n            marginBottom: '10px',\r\n            borderBottom: '1px solid rgba(100,100,100,0.05)'\r\n        }\r\n    }\r\n\r\n    getHeaderNodeStyle(isSibling: boolean = false): React.CSSProperties {\r\n\r\n        const s = this.props.width < 600 ? 30 : 40;\r\n        const c = Math.ceil(s / 5)\r\n        const d = this.props.nodeDepth * c\r\n        const h = s - d;\r\n\r\n        return {\r\n            position: 'relative',\r\n            fontWeight: isSibling ? 'lighter' : 'bolder',\r\n            paddingRight: '10px',\r\n            fontSize: h + 'px',\r\n            lineHeight: 0.8,\r\n            textTransform: 'uppercase',\r\n            mixBlendMode: 'overlay',\r\n            color: isSibling ? 'lightgrey' : 'black',\r\n            opacity: this.props.nodeState.selected ? 1 : 0,\r\n        }\r\n    }\r\n\r\n    getHeader() {\r\n        if (!this.props.parentState || (this.props.parentState &&\r\n            this.props.parentState.selected &&\r\n            this.props.node.data.type === 'dir')) {\r\n            return (\r\n                <div className='layout-header' \r\n                    style={this.getHeaderStyle()}\r\n                    >\r\n                    <div \r\n                        className='layout-header-node' \r\n                        onClick={this.clearSelectedChildren.bind(this)}\r\n                        style={this.getHeaderNodeStyle()}>{this.props.node.data.label}\r\n                    </div>\r\n                    {\r\n                        this.props.width < 600 ? undefined :\r\n                            this.props.nodeSiblings.map(sibling => {\r\n                                if (sibling.data.id !== this.props.node.data.id) {\r\n                                    return (\r\n                                        <div\r\n                                            className='layout-header-node'\r\n                                            onClick={(e) => {\r\n                                                if (this.props.onNodeClick) {\r\n                                                    this.props.onNodeClick(sibling);\r\n                                                    e.stopPropagation();\r\n                                                }\r\n                                             }}\r\n                                            key={sibling.data.id}\r\n                                            style={this.getHeaderNodeStyle(true)}>\r\n                                            {\"/ \" + sibling.data.label}\r\n                                        </div>\r\n                                    )\r\n                                } else {\r\n                                    return undefined\r\n                                }\r\n                            })\r\n                    }\r\n                </div>\r\n            )\r\n        } else return undefined;\r\n    }\r\n\r\n    getOverlay() {\r\n        return this.props.node.data.type === 'dir' ?\r\n            <LayoutOverlay\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                node={this.props.node}\r\n                nodeState={this.props.nodeState}\r\n                nodeDepth={this.props.nodeDepth}\r\n                nodeSiblings={this.props.nodeSiblings}\r\n                parent={this.props.parent}\r\n                parentState={this.props.parentState}\r\n            />\r\n            :\r\n            <LayoutContent\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                node={this.props.node}\r\n                nodeState={this.props.nodeState}\r\n                nodeDepth={this.props.nodeDepth}\r\n                nodeSiblings={this.props.nodeSiblings}\r\n                parent={this.props.parent}\r\n                parentState={this.props.parentState}\r\n            />\r\n    }\r\n\r\n    getChildTop(child: Node) {\r\n        if (this.isChildSelected(child)) return '0%';\r\n        return (100 * child.y0) + \"%\";\r\n    }\r\n\r\n    getChildLeft(child: Node) {\r\n        if (this.isChildSelected(child)) return '0%';\r\n        return (100 * child.x0) + \"%\";\r\n    }\r\n\r\n    getChildWidth(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        if (this.areNoChildrenSelected()) return (100 * (child.x1 - child.x0)) + \"%\";\r\n        return '0%';\r\n    }\r\n\r\n    getChildHeight(child: Node) {\r\n        if (this.isChildSelected(child)) return '100%';\r\n        if (this.areNoChildrenSelected()) return (100 * (child.y1 - child.y0)) + \"%\";\r\n        return '0%';\r\n    }\r\n\r\n    getChildOpacity(child: Node) {\r\n        return this.isChildSelected(child) || this.areNoChildrenSelected() ? 1 : 0;\r\n    }\r\n\r\n    getChildDisplay(child: Node) {\r\n        if (this.isChildSelected(child) || this.areNoChildrenSelected()) return '';\r\n        return 'none';\r\n    }\r\n\r\n    getChildStyle(child: Node): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: this.getChildTop(child),\r\n            left: this.getChildLeft(child),\r\n            height: this.getChildHeight(child),\r\n            width: this.getChildWidth(child),\r\n            transition: this.state.transitionDuration + 'ms',\r\n            opacity: this.getChildOpacity(child),\r\n            willChange: 'top, left, height, width, opacity'\r\n        }\r\n    }\r\n\r\n    getChildrenStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'relative',\r\n            height: '100%',\r\n            width: '100%',\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        // if (this.props.nodeState.selected) {\r\n        return this.layout.children ? this.layout.children.map((child) => {\r\n            return (\r\n                <div\r\n                    key={child.data.id}\r\n                    className='layout-position'\r\n                    style={this.getChildStyle(child)}\r\n                >\r\n                    <Layout\r\n                        width={this.props.width}\r\n                        height={this.props.height}\r\n                        parent={this.props.node}\r\n                        parentState={this.props.nodeState}\r\n                        node={child}\r\n                        nodeState={this.getChildState(child)}\r\n                        nodeDepth={this.props.nodeDepth + 1}\r\n                        nodeSiblings={this.layout.children || []}\r\n                        onNodeClick={this.onChildClick.bind(this)}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n            : [];\r\n        // } else {\r\n        //     return undefined;\r\n        // }\r\n    }\r\n\r\n    getDrawLines() {\r\n        return [\r\n            <div\r\n                key={'top'}\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: window.innerWidth * 3 + 'px',\r\n                    height: '1px',\r\n                    marginTop: '-1px',\r\n                    top: 0,\r\n                    left: 0,\r\n                    marginLeft: -window.innerWidth,\r\n                    pointerEvents: 'none',\r\n                    background: 'rgba(100,100,100,0.05)'\r\n                }}\r\n            >\r\n            </div>,\r\n            <div\r\n                key={'bottom'}\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: window.innerWidth * 3 + 'px',\r\n                    height: '1px',\r\n                    marginBottom : '-1px',\r\n                    left: 0,\r\n                    bottom: 0,\r\n                    marginLeft: -window.innerWidth,\r\n                    pointerEvents: 'none',\r\n                    background: 'rgba(100,100,100,0.05)'\r\n                }}\r\n            >\r\n            </div>,\r\n            <div\r\n                key={'left'}\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: '1px',\r\n                    marginLeft: '-1px',\r\n                    height: window.innerHeight * 3,\r\n                    left: 0,\r\n                    top: 0,\r\n                    marginTop: -window.innerHeight,\r\n                    pointerEvents: 'none',\r\n                    background: 'rgba(100,100,100,0.05)'\r\n                }}\r\n            >\r\n            </div>\r\n        ]\r\n    }\r\n\r\n    getStyle(): React.CSSProperties {\r\n        return {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            flexDirection: 'column',\r\n            zIndex: 1,\r\n            display: this.props.nodeState.hidden ? 'none' : 'flex',\r\n            margin: '-1px',\r\n            border: '1px solid rgba(100,100,100,0.05)'\r\n        }\r\n    }\r\n\r\n    getClassName() {\r\n        const className = ['layout'];\r\n        if (this.props.nodeState.hidden) className.push('hidden');\r\n        if (this.props.nodeState.selected) className.push('selected');\r\n        return className.join(' ');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={this.getClassName()}\r\n                ref={el => this.container = el}\r\n                style={this.getStyle()}\r\n                onClick={() => {\r\n                    if (this.props.onNodeClick) {\r\n                        this.props.onNodeClick(this.props.node);\r\n                    }\r\n                }}\r\n            >\r\n                {this.getHeader()}\r\n                {this.getOverlay()}\r\n                <div\r\n                    className='layout-children'\r\n                    style={this.getChildrenStyle()}\r\n                >\r\n                    {this.getChildren()}\r\n                </div>\r\n                {this.getDrawLines()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { treemap } from './utils/treemap';\nimport { NodeData } from './model/NodeData';\nimport { Layout } from './components/Layout/Layout';\n\nfunction debounce(func: any) {\n    var timer: any;\n    return function (event: any) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 500, event);\n    };\n}\n\nexport interface AppProps {\n    data: NodeData;\n}\nclass App extends React.Component<AppProps> {\n\n    state = {\n        selected: false,\n        width : window.innerWidth,\n        height : window.innerHeight,\n    }\n\n    onNodeClick() {\n        this.setState({ selected: true });\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", debounce(() => {\n            this.setState({ width: window.innerWidth, height: window.innerHeight })\n        }));\n    }\n\n    render() {\n        const node = treemap(this.props.data, this.state.width, this.state.height);\n        node.data.label = \"Luis Jaggy\";\n\n        return (\n            <div\n                className=\"App\"\n                onClick={this.onNodeClick.bind(this)}\n                style={{\n                    height: '95%',\n                    width: '95%',\n                    position: 'absolute',\n                    marginLeft: '2.5%',\n                    // overflow: 'hidden'\n                }}\n            >\n                <Layout\n                    width={this.state.width}\n                    height={this.state.height}\n                    node={node}\n                    nodeState={{ selected: this.state.selected }}\n                    nodeDepth={0}\n                    nodeSiblings={[]}\n                    parent={null}\n                    parentState={null}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { NodeData } from './model/NodeData';\nimport * as d3 from 'd3';\n\nconst PATH = 'data.json';\n\nd3.json(PATH).then((data => {\n    if (data) ReactDOM.render(<App data={data as NodeData}/>, document.getElementById('root'));\n}))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}